{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport _objectWithoutProperties from '@babel/runtime/helpers/esm/objectWithoutProperties';\nimport React__default, { createElement, Fragment } from 'react';\nimport 'prop-types';\nimport { u as useUtils } from './dimensions-91c32fe6.js';\nimport 'clsx';\nimport '@babel/runtime/helpers/esm/extends';\nimport '@material-ui/core/Grid';\nimport '@material-ui/core/Typography';\nimport '@material-ui/core/IconButton';\nimport '@material-ui/core/Toolbar';\nimport { createSvgIcon } from '@material-ui/core/utils';\nimport { T as TimePickerToolbar } from './ClockView-1da258a1.js';\nimport './ArrowSwitcher-81199363.js';\nimport '@material-ui/core/styles';\nimport '@babel/runtime/helpers/esm/slicedToArray';\nimport '@babel/runtime/helpers/esm/typeof';\nimport './utils-ef34bcd7.js';\nimport { b as useParsedDate, j as pick12hOr24hFormat } from './Picker-019ee379.js';\nimport '@material-ui/core/useMediaQuery';\nimport '@material-ui/core/Button';\nimport '@material-ui/core/DialogActions';\nimport '@material-ui/core/DialogContent';\nimport '@material-ui/core/Dialog';\nimport { m as makeValidationHook, a as makePickerWithStateAndWrapper, R as ResponsiveWrapper, D as DesktopWrapper, M as MobileWrapper, S as StaticWrapper } from './makePickerWithState-00818f63.js';\nimport './WrapperVariantContext-a0f5915b.js';\nimport '@material-ui/core/InputAdornment';\nimport 'rifm';\nimport '@material-ui/core/Popover';\nimport '@material-ui/core/Grow';\nimport '@material-ui/core/Paper';\nimport '@material-ui/core/Modal/TrapFocus';\nimport '@material-ui/core/Popper';\nimport './useKeyDown-9f8b37a0.js';\nimport './usePickerState-1c348703.js';\nimport '@babel/runtime/helpers/esm/classCallCheck';\nimport '@babel/runtime/helpers/esm/createClass';\nimport '@babel/runtime/helpers/esm/possibleConstructorReturn';\nimport '@babel/runtime/helpers/esm/getPrototypeOf';\nimport '@babel/runtime/helpers/esm/inherits';\nimport { v as validateTime } from './Clock-72e0463b.js';\nimport '@material-ui/core/ButtonBase';\nimport '@material-ui/core/CircularProgress';\nimport 'react-transition-group';\nimport './Day.js';\nimport './Calendar.js';\nimport '@material-ui/core/Fade';\n/**\n * @ignore - internal component.\n */\n\nvar ClockIcon = createSvgIcon(createElement(Fragment, null, createElement(\"path\", {\n  d: \"M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\"\n}), createElement(\"path\", {\n  d: \"M12.5 7H11v6l5.25 3.15.75-1.23-4.5-2.67z\"\n})), 'Clock');\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction getTextFieldAriaText(value, utils) {\n  return value && utils.isValid(utils.date(value)) ? \"Choose time, selected time is \".concat(utils.format(utils.date(value), 'fullTime')) : 'Choose time';\n}\n\nfunction useInterceptProps(_ref) {\n  var ampm = _ref.ampm,\n      mask = _ref.mask,\n      inputFormat = _ref.inputFormat,\n      __minTime = _ref.minTime,\n      __maxTime = _ref.maxTime,\n      _ref$openTo = _ref.openTo,\n      openTo = _ref$openTo === void 0 ? 'hours' : _ref$openTo,\n      _ref$views = _ref.views,\n      views = _ref$views === void 0 ? ['hours', 'minutes'] : _ref$views,\n      other = _objectWithoutProperties(_ref, [\"ampm\", \"mask\", \"inputFormat\", \"minTime\", \"maxTime\", \"openTo\", \"views\"]);\n\n  var utils = useUtils();\n  var minTime = useParsedDate(__minTime);\n  var maxTime = useParsedDate(__maxTime);\n  var willUseAmPm = ampm !== null && ampm !== void 0 ? ampm : utils.is12HourCycleInCurrentLocale();\n  return _objectSpread({\n    views: views,\n    openTo: openTo,\n    minTime: minTime,\n    maxTime: maxTime,\n    ampm: willUseAmPm,\n    acceptRegex: willUseAmPm ? /[\\dapAP]/gi : /\\d/gi,\n    mask: mask || willUseAmPm ? '__:__ _M' : '__:__',\n    getOpenDialogAriaText: getTextFieldAriaText,\n    openPickerIcon: React__default.createElement(ClockIcon, null),\n    inputFormat: pick12hOr24hFormat(inputFormat, ampm, {\n      localized: utils.formats.fullTime,\n      '12h': utils.formats.fullTime12h,\n      '24h': utils.formats.fullTime24h\n    })\n  }, other);\n}\n\nvar timePickerConfig = {\n  useInterceptProps: useInterceptProps,\n  useValidation: makeValidationHook(validateTime),\n  DefaultToolbarComponent: TimePickerToolbar\n};\nvar TimePicker = makePickerWithStateAndWrapper(ResponsiveWrapper, timePickerConfig);\nvar DesktopTimePicker = makePickerWithStateAndWrapper(DesktopWrapper, timePickerConfig);\nvar MobileTimePicker = makePickerWithStateAndWrapper(MobileWrapper, timePickerConfig);\nvar StaticTimePicker = makePickerWithStateAndWrapper(StaticWrapper, timePickerConfig);\nexport { DesktopTimePicker, MobileTimePicker, StaticTimePicker, TimePicker, getTextFieldAriaText };","map":{"version":3,"sources":["../src/_shared/icons/ClockIcon.tsx","../src/TimePicker/TimePicker.tsx"],"names":["createSvgIcon","React.createElement","value","utils","ampm","mask","inputFormat","minTime","__minTime","maxTime","__maxTime","openTo","views","other","useUtils","useParsedDate","willUseAmPm","acceptRegex","getOpenDialogAriaText","openPickerIcon","React","pick12hOr24hFormat","localized","fullTime24h","timePickerConfig","useInterceptProps","useValidation","makeValidationHook","DefaultToolbarComponent","TimePickerToolbar","TimePicker","makePickerWithStateAndWrapper","DesktopTimePicker","MobileTimePicker","StaticTimePicker"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { createSvgIcon } from '@material-ui/core/utils';\n\n/**\n * @ignore - internal component.\n */\nexport default createSvgIcon(\n  <React.Fragment>\n    <path d=\"M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\" />\n    <path d=\"M12.5 7H11v6l5.25 3.15.75-1.23-4.5-2.67z\" />\n  </React.Fragment>,\n  'Clock'\n);\n","import React from 'react';\nimport ClockIcon from '../_shared/icons/ClockIcon';\nimport { ParsableDate } from '../constants/prop-types';\nimport { TimePickerToolbar } from './TimePickerToolbar';\nimport { ExportedClockViewProps } from '../views/Clock/ClockView';\nimport { ResponsiveWrapper } from '../wrappers/ResponsiveWrapper';\nimport { pick12hOr24hFormat } from '../_helpers/text-field-helper';\nimport { useParsedDate } from '../_shared/hooks/date-helpers-hooks';\nimport { useUtils, MuiPickersAdapter } from '../_shared/hooks/useUtils';\nimport { validateTime, TimeValidationError } from '../_helpers/time-utils';\nimport { makePickerWithStateAndWrapper } from '../Picker/makePickerWithState';\nimport { ModalWrapper, InlineWrapper, StaticWrapper } from '../wrappers/Wrapper';\nimport { WithViewsProps, AllSharedPickerProps } from '../Picker/SharedPickerProps';\nimport { ValidationProps, makeValidationHook } from '../_shared/hooks/useValidation';\n\nexport interface TimePickerProps\n  extends ExportedClockViewProps,\n    ValidationProps<TimeValidationError, ParsableDate>,\n    WithViewsProps<'hours' | 'minutes' | 'seconds'> {}\n\nexport function getTextFieldAriaText(value: ParsableDate, utils: MuiPickersAdapter) {\n  return value && utils.isValid(utils.date(value))\n    ? `Choose time, selected time is ${utils.format(utils.date(value), 'fullTime')}`\n    : 'Choose time';\n}\n\nfunction useInterceptProps({\n  ampm,\n  mask,\n  inputFormat,\n  minTime: __minTime,\n  maxTime: __maxTime,\n  openTo = 'hours',\n  views = ['hours', 'minutes'],\n  ...other\n}: TimePickerProps & AllSharedPickerProps) {\n  const utils = useUtils();\n\n  const minTime = useParsedDate(__minTime);\n  const maxTime = useParsedDate(__maxTime);\n  const willUseAmPm = ampm ?? utils.is12HourCycleInCurrentLocale();\n\n  return {\n    views,\n    openTo,\n    minTime,\n    maxTime,\n    ampm: willUseAmPm,\n    acceptRegex: willUseAmPm ? /[\\dapAP]/gi : /\\d/gi,\n    mask: mask || willUseAmPm ? '__:__ _M' : '__:__',\n    getOpenDialogAriaText: getTextFieldAriaText,\n    openPickerIcon: <ClockIcon />,\n    inputFormat: pick12hOr24hFormat(inputFormat, ampm, {\n      localized: utils.formats.fullTime,\n      '12h': utils.formats.fullTime12h,\n      '24h': utils.formats.fullTime24h,\n    }),\n    ...other,\n  };\n}\n\nconst timePickerConfig = {\n  useInterceptProps,\n  useValidation: makeValidationHook<TimeValidationError, ParsableDate, TimePickerProps>(\n    validateTime\n  ),\n  DefaultToolbarComponent: TimePickerToolbar,\n};\n\nexport const TimePicker = makePickerWithStateAndWrapper<TimePickerProps>(\n  ResponsiveWrapper,\n  timePickerConfig\n);\n\nexport const DesktopTimePicker = makePickerWithStateAndWrapper<TimePickerProps>(\n  InlineWrapper,\n  timePickerConfig\n);\n\nexport const MobileTimePicker = makePickerWithStateAndWrapper<TimePickerProps>(\n  ModalWrapper,\n  timePickerConfig\n);\n\nexport const StaticTimePicker = makePickerWithStateAndWrapper<TimePickerProps>(\n  StaticWrapper,\n  timePickerConfig\n);\n"]},"metadata":{},"sourceType":"module"}