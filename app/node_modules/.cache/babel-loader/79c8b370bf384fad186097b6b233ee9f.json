{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\"; // @inheritedComponent Input\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { mergeClasses } from '@material-ui/styles';\nimport SelectInput from './SelectInput';\nimport formControlState from '../FormControl/formControlState';\nimport withFormControlContext from '../FormControl/withFormControlContext';\nimport withStyles from '../styles/withStyles';\nimport ArrowDropDownIcon from '../internal/svg-icons/ArrowDropDown'; // To replace with InputBase in v4\n\nimport Input from '../Input';\nimport { styles as nativeSelectStyles } from '../NativeSelect/NativeSelect';\nimport NativeSelectInput from '../NativeSelect/NativeSelectInput';\nexport var styles = nativeSelectStyles;\nvar Select = React.forwardRef(function Select(props, ref) {\n  var autoWidth = props.autoWidth,\n      children = props.children,\n      classes = props.classes,\n      displayEmpty = props.displayEmpty,\n      IconComponent = props.IconComponent,\n      input = props.input,\n      inputProps = props.inputProps,\n      MenuProps = props.MenuProps,\n      muiFormControl = props.muiFormControl,\n      multiple = props.multiple,\n      native = props.native,\n      onClose = props.onClose,\n      onOpen = props.onOpen,\n      open = props.open,\n      renderValue = props.renderValue,\n      SelectDisplayProps = props.SelectDisplayProps,\n      variant = props.variant,\n      other = _objectWithoutProperties(props, [\"autoWidth\", \"children\", \"classes\", \"displayEmpty\", \"IconComponent\", \"input\", \"inputProps\", \"MenuProps\", \"muiFormControl\", \"multiple\", \"native\", \"onClose\", \"onOpen\", \"open\", \"renderValue\", \"SelectDisplayProps\", \"variant\"]);\n\n  var inputComponent = native ? NativeSelectInput : SelectInput;\n  var fcs = formControlState({\n    props: props,\n    muiFormControl: muiFormControl,\n    states: ['variant']\n  });\n  return React.cloneElement(input, _extends({\n    // Most of the logic is implemented in `SelectInput`.\n    // The `Select` component is a simple API wrapper to expose something better to play with.\n    inputComponent: inputComponent,\n    inputProps: _extends({\n      children: children,\n      IconComponent: IconComponent,\n      variant: fcs.variant,\n      type: undefined,\n      // We render a select. We can ignore the type provided by the `Input`.\n      multiple: multiple\n    }, native ? {} : {\n      autoWidth: autoWidth,\n      displayEmpty: displayEmpty,\n      MenuProps: MenuProps,\n      onClose: onClose,\n      onOpen: onOpen,\n      open: open,\n      renderValue: renderValue,\n      SelectDisplayProps: SelectDisplayProps\n    }, inputProps, {\n      classes: inputProps ? mergeClasses({\n        baseClasses: classes,\n        newClasses: inputProps.classes,\n        Component: Select\n      }) : classes\n    }, input ? input.props.inputProps : {}),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Select.propTypes = {\n  /**\n   * If true, the width of the popover will automatically be set according to the items inside the\n   * menu, otherwise it will be at least the width of the select input.\n   */\n  autoWidth: PropTypes.bool,\n\n  /**\n   * The option elements to populate the select with.\n   * Can be some `MenuItem` when `native` is false and `option` when `native` is true.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * If `true`, the selected item is displayed even if its value is empty.\n   * You can only use it when the `native` property is `false` (default).\n   */\n  displayEmpty: PropTypes.bool,\n\n  /**\n   * The icon that displays the arrow.\n   */\n  IconComponent: PropTypes.elementType,\n\n  /**\n   * An `Input` element; does not have to be a material-ui specific `Input`.\n   */\n  input: PropTypes.element,\n\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   * When `native` is `true`, the attributes are applied on the `select` element.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * Properties applied to the [`Menu`](/api/menu/) element.\n   */\n  MenuProps: PropTypes.object,\n\n  /**\n   * @ignore\n   * from `withFormControlContext`\n   */\n  muiFormControl: PropTypes.object,\n\n  /**\n   * If true, `value` must be an array and the menu will support multiple selections.\n   */\n  multiple: PropTypes.bool,\n\n  /**\n   * If `true`, the component will be using a native `select` element.\n   */\n  native: PropTypes.bool,\n\n  /**\n   * Callback function fired when a menu item is selected.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value`.\n   * @param {object} [child] The react element that was selected when `native` is `false` (default).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Callback fired when the component requests to be closed.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback fired when the component requests to be opened.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * Control `select` open state.\n   * You can only use it when the `native` property is `false` (default).\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Render the selected value.\n   * You can only use it when the `native` property is `false` (default).\n   *\n   * @param {*} value The `value` provided to the component.\n   * @returns {ReactElement}\n   */\n  renderValue: PropTypes.func,\n\n  /**\n   * Properties applied to the clickable div element.\n   */\n  SelectDisplayProps: PropTypes.object,\n\n  /**\n   * The input value.\n   * This property is required when the `native` property is `false` (default).\n   */\n  value: PropTypes.any,\n\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['standard', 'outlined', 'filled'])\n} : void 0;\nSelect.defaultProps = {\n  autoWidth: false,\n  displayEmpty: false,\n  IconComponent: ArrowDropDownIcon,\n  input: React.createElement(Input, null),\n  multiple: false,\n  native: false\n};\nSelect.muiName = 'Select';\nexport default withStyles(styles, {\n  name: 'MuiSelect'\n})(withFormControlContext(Select));","map":{"version":3,"sources":["C:/Users/robson/Desktop/cidadealta/cidadealta-app/node_modules/@material-ui/core/esm/Select/Select.js"],"names":["_extends","_objectWithoutProperties","React","PropTypes","mergeClasses","SelectInput","formControlState","withFormControlContext","withStyles","ArrowDropDownIcon","Input","styles","nativeSelectStyles","NativeSelectInput","Select","forwardRef","props","ref","autoWidth","children","classes","displayEmpty","IconComponent","input","inputProps","MenuProps","muiFormControl","multiple","native","onClose","onOpen","open","renderValue","SelectDisplayProps","variant","other","inputComponent","fcs","states","cloneElement","type","undefined","baseClasses","newClasses","Component","process","env","NODE_ENV","propTypes","bool","node","object","isRequired","elementType","element","onChange","func","value","any","oneOf","defaultProps","createElement","muiName","name"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\n// @inheritedComponent Input\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { mergeClasses } from '@material-ui/styles';\nimport SelectInput from './SelectInput';\nimport formControlState from '../FormControl/formControlState';\nimport withFormControlContext from '../FormControl/withFormControlContext';\nimport withStyles from '../styles/withStyles';\nimport ArrowDropDownIcon from '../internal/svg-icons/ArrowDropDown'; // To replace with InputBase in v4\n\nimport Input from '../Input';\nimport { styles as nativeSelectStyles } from '../NativeSelect/NativeSelect';\nimport NativeSelectInput from '../NativeSelect/NativeSelectInput';\nexport var styles = nativeSelectStyles;\nvar Select = React.forwardRef(function Select(props, ref) {\n  var autoWidth = props.autoWidth,\n      children = props.children,\n      classes = props.classes,\n      displayEmpty = props.displayEmpty,\n      IconComponent = props.IconComponent,\n      input = props.input,\n      inputProps = props.inputProps,\n      MenuProps = props.MenuProps,\n      muiFormControl = props.muiFormControl,\n      multiple = props.multiple,\n      native = props.native,\n      onClose = props.onClose,\n      onOpen = props.onOpen,\n      open = props.open,\n      renderValue = props.renderValue,\n      SelectDisplayProps = props.SelectDisplayProps,\n      variant = props.variant,\n      other = _objectWithoutProperties(props, [\"autoWidth\", \"children\", \"classes\", \"displayEmpty\", \"IconComponent\", \"input\", \"inputProps\", \"MenuProps\", \"muiFormControl\", \"multiple\", \"native\", \"onClose\", \"onOpen\", \"open\", \"renderValue\", \"SelectDisplayProps\", \"variant\"]);\n\n  var inputComponent = native ? NativeSelectInput : SelectInput;\n  var fcs = formControlState({\n    props: props,\n    muiFormControl: muiFormControl,\n    states: ['variant']\n  });\n  return React.cloneElement(input, _extends({\n    // Most of the logic is implemented in `SelectInput`.\n    // The `Select` component is a simple API wrapper to expose something better to play with.\n    inputComponent: inputComponent,\n    inputProps: _extends({\n      children: children,\n      IconComponent: IconComponent,\n      variant: fcs.variant,\n      type: undefined,\n      // We render a select. We can ignore the type provided by the `Input`.\n      multiple: multiple\n    }, native ? {} : {\n      autoWidth: autoWidth,\n      displayEmpty: displayEmpty,\n      MenuProps: MenuProps,\n      onClose: onClose,\n      onOpen: onOpen,\n      open: open,\n      renderValue: renderValue,\n      SelectDisplayProps: SelectDisplayProps\n    }, inputProps, {\n      classes: inputProps ? mergeClasses({\n        baseClasses: classes,\n        newClasses: inputProps.classes,\n        Component: Select\n      }) : classes\n    }, input ? input.props.inputProps : {}),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Select.propTypes = {\n  /**\n   * If true, the width of the popover will automatically be set according to the items inside the\n   * menu, otherwise it will be at least the width of the select input.\n   */\n  autoWidth: PropTypes.bool,\n\n  /**\n   * The option elements to populate the select with.\n   * Can be some `MenuItem` when `native` is false and `option` when `native` is true.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * If `true`, the selected item is displayed even if its value is empty.\n   * You can only use it when the `native` property is `false` (default).\n   */\n  displayEmpty: PropTypes.bool,\n\n  /**\n   * The icon that displays the arrow.\n   */\n  IconComponent: PropTypes.elementType,\n\n  /**\n   * An `Input` element; does not have to be a material-ui specific `Input`.\n   */\n  input: PropTypes.element,\n\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   * When `native` is `true`, the attributes are applied on the `select` element.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * Properties applied to the [`Menu`](/api/menu/) element.\n   */\n  MenuProps: PropTypes.object,\n\n  /**\n   * @ignore\n   * from `withFormControlContext`\n   */\n  muiFormControl: PropTypes.object,\n\n  /**\n   * If true, `value` must be an array and the menu will support multiple selections.\n   */\n  multiple: PropTypes.bool,\n\n  /**\n   * If `true`, the component will be using a native `select` element.\n   */\n  native: PropTypes.bool,\n\n  /**\n   * Callback function fired when a menu item is selected.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value`.\n   * @param {object} [child] The react element that was selected when `native` is `false` (default).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Callback fired when the component requests to be closed.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback fired when the component requests to be opened.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * Control `select` open state.\n   * You can only use it when the `native` property is `false` (default).\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Render the selected value.\n   * You can only use it when the `native` property is `false` (default).\n   *\n   * @param {*} value The `value` provided to the component.\n   * @returns {ReactElement}\n   */\n  renderValue: PropTypes.func,\n\n  /**\n   * Properties applied to the clickable div element.\n   */\n  SelectDisplayProps: PropTypes.object,\n\n  /**\n   * The input value.\n   * This property is required when the `native` property is `false` (default).\n   */\n  value: PropTypes.any,\n\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['standard', 'outlined', 'filled'])\n} : void 0;\nSelect.defaultProps = {\n  autoWidth: false,\n  displayEmpty: false,\n  IconComponent: ArrowDropDownIcon,\n  input: React.createElement(Input, null),\n  multiple: false,\n  native: false\n};\nSelect.muiName = 'Select';\nexport default withStyles(styles, {\n  name: 'MuiSelect'\n})(withFormControlContext(Select));"]},"metadata":{},"sourceType":"module"}