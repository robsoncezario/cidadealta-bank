{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\robson\\\\Desktop\\\\drip\\\\server-data\\\\resources\\\\[drip]\\\\drip_bank\\\\src\\\\screens\\\\Withdraw\\\\index.tsx\";\nimport React from 'react';\nimport { Typography, TextField } from '@material-ui/core';\nimport NumberFormat from 'react-number-format';\nimport { useRecoilValue } from 'recoil';\nimport * as atoms from '../../navigation/atoms';\nconst styles = {\n  container: {\n    width: '100%',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'space-around'\n  },\n  buttonContainer: {\n    width: '100%',\n    height: '30vh',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    flexDirection: 'column',\n    boxSizing: 'border-box',\n    padding: '1vh'\n  },\n  icon: {\n    width: '3vh',\n    height: '3vh'\n  },\n  withDescription: {\n    display: 'flex',\n    alignItems: 'flex-start',\n    justifyContent: 'flex-start',\n    flexDirection: 'column'\n  },\n  withSpace: {\n    marginLeft: '1vh'\n  }\n};\n\nfunction NumberFormatCustom(props) {\n  const {\n    inputRef,\n    onChange,\n    ...other\n  } = props;\n  return React.createElement(NumberFormat, Object.assign({}, other, {\n    getInputRef: inputRef,\n    onValueChange: values => {\n      onChange({\n        target: {\n          name: props.name,\n          value: values.value\n        }\n      });\n    },\n    thousandSeparator: true,\n    isNumericString: true,\n    prefix: \"$\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }));\n}\n\nconst WithdrawScreen = () => {\n  const {\n    account\n  } = useRecoilValue(atoms.navigationAtom);\n  const [amount, setAmount] = React.useState('0');\n\n  const handleChange = event => {\n    const value = parseInt(event.target.value).toString();\n    console.log(parseInt(value));\n    setAmount(event.target.value);\n  };\n\n  return React.createElement(\"div\", {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    style: styles.buttonContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    style: styles.withDescription,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"subtitle2\",\n    component: \"div\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, \"Quanto voc\\xEA gostaria de sacar?\"), React.createElement(Typography, {\n    variant: \"body2\",\n    component: \"div\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, \"Voc\\xEA tem \", new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD'\n  }).format(account.bankMoney), \" dispon\\xEDvel\"), React.createElement(TextField, {\n    label: \"\",\n    value: account.bankMoney.toString(),\n    onChange: handleChange,\n    id: \"formatted-numberformat-input\",\n    InputProps: {\n      inputComponent: NumberFormatCustom\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  })));\n};\n\nexport default WithdrawScreen;","map":{"version":3,"sources":["C:/Users/robson/Desktop/drip/server-data/resources/[drip]/drip_bank/src/screens/Withdraw/index.tsx"],"names":["React","Typography","TextField","NumberFormat","useRecoilValue","atoms","styles","container","width","display","alignItems","justifyContent","buttonContainer","height","flexDirection","boxSizing","padding","icon","withDescription","withSpace","marginLeft","NumberFormatCustom","props","inputRef","onChange","other","values","target","name","value","WithdrawScreen","account","navigationAtom","amount","setAmount","useState","handleChange","event","parseInt","toString","console","log","Intl","style","currency","format","bankMoney","inputComponent"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport { \r\n  Typography,\r\n  TextField,\r\n  withStyles\r\n} from '@material-ui/core';\r\nimport NumberFormat from 'react-number-format';\r\nimport { useRecoilValue } from 'recoil';\r\nimport * as atoms from '../../navigation/atoms';\r\n\r\nconst styles = {\r\n  container: {\r\n    width: '100%',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'space-around'\r\n  },\r\n\r\n  buttonContainer: {\r\n    width: '100%',\r\n    height: '30vh',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    flexDirection: 'column',\r\n    boxSizing: 'border-box',\r\n    padding: '1vh'\r\n  } as React.CSSProperties,\r\n\r\n  icon: {\r\n    width: '3vh',\r\n    height: '3vh'\r\n  } as React.CSSProperties,\r\n\r\n  withDescription: {\r\n    display: 'flex',\r\n    alignItems: 'flex-start',\r\n    justifyContent: 'flex-start',\r\n    flexDirection: 'column'\r\n  } as React.CSSProperties,\r\n\r\n  withSpace: {\r\n    marginLeft: '1vh'\r\n  } as React.CSSProperties\r\n}\r\n\r\ninterface NumberFormatCustomProps {\r\n  inputRef: (instance: NumberFormat | null) => void;\r\n  onChange: (event: { target: { name: string; value: string } }) => void;\r\n  name: string;\r\n}\r\n\r\nfunction NumberFormatCustom(props: NumberFormatCustomProps) {\r\n  const { inputRef, onChange, ...other } = props;\r\n\r\n  return (\r\n    <NumberFormat\r\n      {...other}\r\n      getInputRef={inputRef}\r\n      onValueChange={(values) => {\r\n        onChange({\r\n          target: {\r\n            name: props.name,\r\n            value: values.value,\r\n          },\r\n        });\r\n      }}\r\n      thousandSeparator\r\n      isNumericString\r\n      prefix=\"$\"\r\n    />\r\n  );\r\n}\r\n\r\nconst WithdrawScreen = () => {\r\n  const {account} = useRecoilValue(atoms.navigationAtom);\r\n\r\n  const [amount, setAmount] = React.useState('0');\r\n\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const value = parseInt(event.target.value as string).toString();\r\n    \r\n    console.log(parseInt(value));\r\n\r\n    setAmount(event.target.value as string);\r\n  };\r\n\r\n  return (\r\n    <div style={styles.container}>\r\n      <div style={styles.buttonContainer}>\r\n        <div style={styles.withDescription}>\r\n          <Typography \r\n            variant='subtitle2' \r\n            component='div'>\r\n            Quanto você gostaria de sacar?\r\n          </Typography>\r\n\r\n          <Typography \r\n            variant='body2' \r\n            component='div'>\r\n            Você tem {new Intl.NumberFormat('en-US', { \r\n              style: 'currency', \r\n              currency: 'USD'\r\n            }).format(account.bankMoney)} disponível\r\n          </Typography>\r\n\r\n          <TextField\r\n            label=\"\"\r\n            value={account.bankMoney.toString()}\r\n            onChange={handleChange}\r\n            id=\"formatted-numberformat-input\"\r\n            InputProps={{\r\n              inputComponent: NumberFormatCustom as any,\r\n            }}\r\n          />\r\n        </div>\r\n\r\n        <div></div>\r\n      </div>  \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WithdrawScreen;"]},"metadata":{},"sourceType":"module"}