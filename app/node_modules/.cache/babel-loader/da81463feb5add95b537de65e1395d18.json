{"ast":null,"code":"import warning from 'warning';\nimport ownerDocument from '../utils/ownerDocument';\nvar internal = {\n  focusKeyPressed: false,\n  keyUpEventTimeout: -1\n};\n\nfunction findActiveElement(doc) {\n  var activeElement = doc.activeElement;\n\n  while (activeElement && activeElement.shadowRoot && activeElement.shadowRoot.activeElement) {\n    activeElement = activeElement.shadowRoot.activeElement;\n  }\n\n  return activeElement;\n}\n\nexport function detectFocusVisible(instance, element, callback) {\n  var attempt = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n  process.env.NODE_ENV !== \"production\" ? warning(instance.focusVisibleCheckTime, 'Material-UI: missing instance.focusVisibleCheckTime.') : void 0;\n  process.env.NODE_ENV !== \"production\" ? warning(instance.focusVisibleMaxCheckTimes, 'Material-UI: missing instance.focusVisibleMaxCheckTimes.') : void 0;\n  instance.focusVisibleTimeout = setTimeout(function () {\n    var doc = ownerDocument(element);\n    var activeElement = findActiveElement(doc);\n\n    if (internal.focusKeyPressed && (activeElement === element || element.contains(activeElement))) {\n      callback();\n    } else if (attempt < instance.focusVisibleMaxCheckTimes) {\n      detectFocusVisible(instance, element, callback, attempt + 1);\n    }\n  }, instance.focusVisibleCheckTime);\n} // The keys that might change document.activeElement.\n\nvar FOCUS_KEYS = [9, // 'Tab',\n13, // 'Enter',\n27, // 'Escape',\n32, // ' ',\n36, // 'Home',\n35, // 'End',\n37, // 'ArrowLeft',\n38, // 'ArrowUp',\n39, // 'ArrowRight',\n40];\n\nfunction isFocusKey(event) {\n  // Use event.keyCode to support IE 11\n  return FOCUS_KEYS.indexOf(event.keyCode) > -1;\n}\n\nvar handleKeyUpEvent = function handleKeyUpEvent(event) {\n  if (isFocusKey(event)) {\n    internal.focusKeyPressed = true; // Let's consider that the user is using a keyboard during a window frame of 500ms.\n\n    clearTimeout(internal.keyUpEventTimeout);\n    internal.keyUpEventTimeout = setTimeout(function () {\n      internal.focusKeyPressed = false;\n    }, 500);\n  }\n};\n\nexport function listenForFocusKeys(win) {\n  // The event listener will only be added once per window.\n  // Duplicate event listeners will be ignored by addEventListener.\n  // Also, this logic is client side only, we don't need a teardown.\n  win.addEventListener('keyup', handleKeyUpEvent);\n}","map":{"version":3,"sources":["C:/Users/robson/Desktop/cidadealta/cidadealta-app/node_modules/@material-ui/core/esm/ButtonBase/focusVisible.js"],"names":["warning","ownerDocument","internal","focusKeyPressed","keyUpEventTimeout","findActiveElement","doc","activeElement","shadowRoot","detectFocusVisible","instance","element","callback","attempt","arguments","length","undefined","process","env","NODE_ENV","focusVisibleCheckTime","focusVisibleMaxCheckTimes","focusVisibleTimeout","setTimeout","contains","FOCUS_KEYS","isFocusKey","event","indexOf","keyCode","handleKeyUpEvent","clearTimeout","listenForFocusKeys","win","addEventListener"],"mappings":"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","sourcesContent":["import warning from 'warning';\nimport ownerDocument from '../utils/ownerDocument';\nvar internal = {\n  focusKeyPressed: false,\n  keyUpEventTimeout: -1\n};\n\nfunction findActiveElement(doc) {\n  var activeElement = doc.activeElement;\n\n  while (activeElement && activeElement.shadowRoot && activeElement.shadowRoot.activeElement) {\n    activeElement = activeElement.shadowRoot.activeElement;\n  }\n\n  return activeElement;\n}\n\nexport function detectFocusVisible(instance, element, callback) {\n  var attempt = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n  process.env.NODE_ENV !== \"production\" ? warning(instance.focusVisibleCheckTime, 'Material-UI: missing instance.focusVisibleCheckTime.') : void 0;\n  process.env.NODE_ENV !== \"production\" ? warning(instance.focusVisibleMaxCheckTimes, 'Material-UI: missing instance.focusVisibleMaxCheckTimes.') : void 0;\n  instance.focusVisibleTimeout = setTimeout(function () {\n    var doc = ownerDocument(element);\n    var activeElement = findActiveElement(doc);\n\n    if (internal.focusKeyPressed && (activeElement === element || element.contains(activeElement))) {\n      callback();\n    } else if (attempt < instance.focusVisibleMaxCheckTimes) {\n      detectFocusVisible(instance, element, callback, attempt + 1);\n    }\n  }, instance.focusVisibleCheckTime);\n} // The keys that might change document.activeElement.\n\nvar FOCUS_KEYS = [9, // 'Tab',\n13, // 'Enter',\n27, // 'Escape',\n32, // ' ',\n36, // 'Home',\n35, // 'End',\n37, // 'ArrowLeft',\n38, // 'ArrowUp',\n39, // 'ArrowRight',\n40];\n\nfunction isFocusKey(event) {\n  // Use event.keyCode to support IE 11\n  return FOCUS_KEYS.indexOf(event.keyCode) > -1;\n}\n\nvar handleKeyUpEvent = function handleKeyUpEvent(event) {\n  if (isFocusKey(event)) {\n    internal.focusKeyPressed = true; // Let's consider that the user is using a keyboard during a window frame of 500ms.\n\n    clearTimeout(internal.keyUpEventTimeout);\n    internal.keyUpEventTimeout = setTimeout(function () {\n      internal.focusKeyPressed = false;\n    }, 500);\n  }\n};\n\nexport function listenForFocusKeys(win) {\n  // The event listener will only be added once per window.\n  // Duplicate event listeners will be ignored by addEventListener.\n  // Also, this logic is client side only, we don't need a teardown.\n  win.addEventListener('keyup', handleKeyUpEvent);\n}"]},"metadata":{},"sourceType":"module"}