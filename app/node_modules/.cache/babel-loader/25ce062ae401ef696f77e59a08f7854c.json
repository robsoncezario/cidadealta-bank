{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\"; // @inheritedComponent IconButton\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { fade } from '../styles/colorManipulator';\nimport SwitchBase from '../internal/SwitchBase';\nimport CheckBoxOutlineBlankIcon from '../internal/svg-icons/CheckBoxOutlineBlank';\nimport CheckBoxIcon from '../internal/svg-icons/CheckBox';\nimport IndeterminateCheckBoxIcon from '../internal/svg-icons/IndeterminateCheckBox';\nimport withStyles from '../styles/withStyles';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      '&:not($checked)': {\n        color: theme.palette.text.secondary,\n        '&:hover': {\n          backgroundColor: fade(theme.palette.action.active, theme.palette.action.hoverOpacity)\n        }\n      }\n    },\n\n    /* Styles applied to the root element if `checked={true}`. */\n    checked: {},\n\n    /* Styles applied to the root element if `disabled={true}`. */\n    disabled: {},\n\n    /* Styles applied to the root element if `indeterminate={true}`. */\n    indeterminate: {}\n  };\n};\nvar Checkbox = React.forwardRef(function Checkbox(props, ref) {\n  var checkedIcon = props.checkedIcon,\n      classes = props.classes,\n      className = props.className,\n      icon = props.icon,\n      indeterminate = props.indeterminate,\n      indeterminateIcon = props.indeterminateIcon,\n      inputProps = props.inputProps,\n      other = _objectWithoutProperties(props, [\"checkedIcon\", \"classes\", \"className\", \"icon\", \"indeterminate\", \"indeterminateIcon\", \"inputProps\"]);\n\n  return React.createElement(SwitchBase, _extends({\n    type: \"checkbox\",\n    checkedIcon: indeterminate ? indeterminateIcon : checkedIcon,\n    className: clsx(classes.root, _defineProperty({}, classes.indeterminate, indeterminate), className),\n    classes: {\n      checked: classes.checked,\n      disabled: classes.disabled\n    },\n    inputProps: _extends({\n      'data-indeterminate': indeterminate\n    }, inputProps),\n    icon: indeterminate ? indeterminateIcon : icon,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Checkbox.propTypes = {\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is checked.\n   */\n  checkedIcon: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['primary', 'secondary', 'default']),\n\n  /**\n   * If `true`, the switch will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the ripple effect will be disabled.\n   */\n  disableRipple: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is unchecked.\n   */\n  icon: PropTypes.node,\n\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n\n  /**\n   * If `true`, the component appears indeterminate.\n   * This does not set the native input element to indeterminate due\n   * to inconsistent behavior across browsers.\n   * However, we set a `data-indeterminate` attribute on the input.\n   */\n  indeterminate: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is indeterminate.\n   */\n  indeterminateIcon: PropTypes.node,\n\n  /**\n   * Properties applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * This property can be used to pass a ref callback to the `input` element.\n   */\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.checked`.\n   * @param {boolean} checked The `checked` value of the switch\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * The input component property `type`.\n   */\n  type: PropTypes.string,\n\n  /**\n   * The value of the component. The DOM API casts this to a string.\n   */\n  value: PropTypes.any\n} : void 0;\nCheckbox.defaultProps = {\n  checkedIcon: React.createElement(CheckBoxIcon, null),\n  color: 'secondary',\n  icon: React.createElement(CheckBoxOutlineBlankIcon, null),\n  indeterminate: false,\n  indeterminateIcon: React.createElement(IndeterminateCheckBoxIcon, null)\n};\nexport default withStyles(styles, {\n  name: 'MuiCheckbox'\n})(Checkbox);","map":{"version":3,"sources":["C:/Users/robson/Desktop/cidadealta/cidadealta-app/node_modules/@material-ui/core/esm/Checkbox/Checkbox.js"],"names":["_extends","_defineProperty","_objectWithoutProperties","React","PropTypes","clsx","fade","SwitchBase","CheckBoxOutlineBlankIcon","CheckBoxIcon","IndeterminateCheckBoxIcon","withStyles","styles","theme","root","color","palette","text","secondary","backgroundColor","action","active","hoverOpacity","checked","disabled","indeterminate","Checkbox","forwardRef","props","ref","checkedIcon","classes","className","icon","indeterminateIcon","inputProps","other","createElement","type","process","env","NODE_ENV","propTypes","bool","node","object","isRequired","string","oneOf","disableRipple","id","inputRef","oneOfType","func","onChange","value","any","defaultProps","name"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\n// @inheritedComponent IconButton\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { fade } from '../styles/colorManipulator';\nimport SwitchBase from '../internal/SwitchBase';\nimport CheckBoxOutlineBlankIcon from '../internal/svg-icons/CheckBoxOutlineBlank';\nimport CheckBoxIcon from '../internal/svg-icons/CheckBox';\nimport IndeterminateCheckBoxIcon from '../internal/svg-icons/IndeterminateCheckBox';\nimport withStyles from '../styles/withStyles';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      '&:not($checked)': {\n        color: theme.palette.text.secondary,\n        '&:hover': {\n          backgroundColor: fade(theme.palette.action.active, theme.palette.action.hoverOpacity)\n        }\n      }\n    },\n\n    /* Styles applied to the root element if `checked={true}`. */\n    checked: {},\n\n    /* Styles applied to the root element if `disabled={true}`. */\n    disabled: {},\n\n    /* Styles applied to the root element if `indeterminate={true}`. */\n    indeterminate: {}\n  };\n};\nvar Checkbox = React.forwardRef(function Checkbox(props, ref) {\n  var checkedIcon = props.checkedIcon,\n      classes = props.classes,\n      className = props.className,\n      icon = props.icon,\n      indeterminate = props.indeterminate,\n      indeterminateIcon = props.indeterminateIcon,\n      inputProps = props.inputProps,\n      other = _objectWithoutProperties(props, [\"checkedIcon\", \"classes\", \"className\", \"icon\", \"indeterminate\", \"indeterminateIcon\", \"inputProps\"]);\n\n  return React.createElement(SwitchBase, _extends({\n    type: \"checkbox\",\n    checkedIcon: indeterminate ? indeterminateIcon : checkedIcon,\n    className: clsx(classes.root, _defineProperty({}, classes.indeterminate, indeterminate), className),\n    classes: {\n      checked: classes.checked,\n      disabled: classes.disabled\n    },\n    inputProps: _extends({\n      'data-indeterminate': indeterminate\n    }, inputProps),\n    icon: indeterminate ? indeterminateIcon : icon,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Checkbox.propTypes = {\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is checked.\n   */\n  checkedIcon: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['primary', 'secondary', 'default']),\n\n  /**\n   * If `true`, the switch will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the ripple effect will be disabled.\n   */\n  disableRipple: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is unchecked.\n   */\n  icon: PropTypes.node,\n\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n\n  /**\n   * If `true`, the component appears indeterminate.\n   * This does not set the native input element to indeterminate due\n   * to inconsistent behavior across browsers.\n   * However, we set a `data-indeterminate` attribute on the input.\n   */\n  indeterminate: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is indeterminate.\n   */\n  indeterminateIcon: PropTypes.node,\n\n  /**\n   * Properties applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * This property can be used to pass a ref callback to the `input` element.\n   */\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.checked`.\n   * @param {boolean} checked The `checked` value of the switch\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * The input component property `type`.\n   */\n  type: PropTypes.string,\n\n  /**\n   * The value of the component. The DOM API casts this to a string.\n   */\n  value: PropTypes.any\n} : void 0;\nCheckbox.defaultProps = {\n  checkedIcon: React.createElement(CheckBoxIcon, null),\n  color: 'secondary',\n  icon: React.createElement(CheckBoxOutlineBlankIcon, null),\n  indeterminate: false,\n  indeterminateIcon: React.createElement(IndeterminateCheckBoxIcon, null)\n};\nexport default withStyles(styles, {\n  name: 'MuiCheckbox'\n})(Checkbox);"]},"metadata":{},"sourceType":"module"}