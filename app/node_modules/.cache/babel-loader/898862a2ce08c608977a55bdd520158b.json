{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React from 'react'; // This variable will be true once the server-side hydration is completed.\n\nvar hydrationCompleted = false;\n\nfunction useMediaQuery(queryInput) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var query = queryInput.replace('@media ', '');\n  var _options$defaultMatch = options.defaultMatches,\n      defaultMatches = _options$defaultMatch === void 0 ? false : _options$defaultMatch,\n      _options$noSsr = options.noSsr,\n      noSsr = _options$noSsr === void 0 ? false : _options$noSsr,\n      _options$ssrMatchMedi = options.ssrMatchMedia,\n      ssrMatchMedia = _options$ssrMatchMedi === void 0 ? null : _options$ssrMatchMedi;\n\n  var _React$useState = React.useState(function () {\n    if (hydrationCompleted || noSsr) {\n      return window.matchMedia(query).matches;\n    }\n\n    if (ssrMatchMedia) {\n      return ssrMatchMedia(query).matches;\n    } // Once the component is mounted, we rely on the\n    // event listeners to return the correct matches value.\n\n\n    return defaultMatches;\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      matches = _React$useState2[0],\n      setMatches = _React$useState2[1];\n\n  React.useEffect(function () {\n    hydrationCompleted = true;\n    var queryList = window.matchMedia(query);\n    setMatches(queryList.matches);\n\n    function handleMatchesChange(event) {\n      setMatches(event.matches);\n    }\n\n    queryList.addListener(handleMatchesChange);\n    return function () {\n      queryList.removeListener(handleMatchesChange);\n    };\n  }, [query]);\n  return matches;\n}\n\nexport function testReset() {\n  hydrationCompleted = false;\n}\nexport default useMediaQuery;","map":{"version":3,"sources":["C:/Users/robson/Desktop/cidadealta/cidadealta-app/node_modules/@material-ui/core/esm/useMediaQuery/useMediaQuery.js"],"names":["_slicedToArray","React","hydrationCompleted","useMediaQuery","queryInput","options","arguments","length","undefined","query","replace","_options$defaultMatch","defaultMatches","_options$noSsr","noSsr","_options$ssrMatchMedi","ssrMatchMedia","_React$useState","useState","window","matchMedia","matches","_React$useState2","setMatches","useEffect","queryList","handleMatchesChange","event","addListener","removeListener","testReset"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,sCAA3B;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAA2B;;AAE3B,IAAIC,kBAAkB,GAAG,KAAzB;;AAEA,SAASC,aAAT,CAAuBC,UAAvB,EAAmC;AACjC,MAAIC,OAAO,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAAlF;AACA,MAAIG,KAAK,GAAGL,UAAU,CAACM,OAAX,CAAmB,SAAnB,EAA8B,EAA9B,CAAZ;AACA,MAAIC,qBAAqB,GAAGN,OAAO,CAACO,cAApC;AAAA,MACIA,cAAc,GAAGD,qBAAqB,KAAK,KAAK,CAA/B,GAAmC,KAAnC,GAA2CA,qBADhE;AAAA,MAEIE,cAAc,GAAGR,OAAO,CAACS,KAF7B;AAAA,MAGIA,KAAK,GAAGD,cAAc,KAAK,KAAK,CAAxB,GAA4B,KAA5B,GAAoCA,cAHhD;AAAA,MAIIE,qBAAqB,GAAGV,OAAO,CAACW,aAJpC;AAAA,MAKIA,aAAa,GAAGD,qBAAqB,KAAK,KAAK,CAA/B,GAAmC,IAAnC,GAA0CA,qBAL9D;;AAOA,MAAIE,eAAe,GAAGhB,KAAK,CAACiB,QAAN,CAAe,YAAY;AAC/C,QAAIhB,kBAAkB,IAAIY,KAA1B,EAAiC;AAC/B,aAAOK,MAAM,CAACC,UAAP,CAAkBX,KAAlB,EAAyBY,OAAhC;AACD;;AAED,QAAIL,aAAJ,EAAmB;AACjB,aAAOA,aAAa,CAACP,KAAD,CAAb,CAAqBY,OAA5B;AACD,KAP8C,CAO7C;AACF;;;AAGA,WAAOT,cAAP;AACD,GAZqB,CAAtB;AAAA,MAaIU,gBAAgB,GAAGtB,cAAc,CAACiB,eAAD,EAAkB,CAAlB,CAbrC;AAAA,MAcII,OAAO,GAAGC,gBAAgB,CAAC,CAAD,CAd9B;AAAA,MAeIC,UAAU,GAAGD,gBAAgB,CAAC,CAAD,CAfjC;;AAiBArB,EAAAA,KAAK,CAACuB,SAAN,CAAgB,YAAY;AAC1BtB,IAAAA,kBAAkB,GAAG,IAArB;AACA,QAAIuB,SAAS,GAAGN,MAAM,CAACC,UAAP,CAAkBX,KAAlB,CAAhB;AACAc,IAAAA,UAAU,CAACE,SAAS,CAACJ,OAAX,CAAV;;AAEA,aAASK,mBAAT,CAA6BC,KAA7B,EAAoC;AAClCJ,MAAAA,UAAU,CAACI,KAAK,CAACN,OAAP,CAAV;AACD;;AAEDI,IAAAA,SAAS,CAACG,WAAV,CAAsBF,mBAAtB;AACA,WAAO,YAAY;AACjBD,MAAAA,SAAS,CAACI,cAAV,CAAyBH,mBAAzB;AACD,KAFD;AAGD,GAbD,EAaG,CAACjB,KAAD,CAbH;AAcA,SAAOY,OAAP;AACD;;AAED,OAAO,SAASS,SAAT,GAAqB;AAC1B5B,EAAAA,kBAAkB,GAAG,KAArB;AACD;AACD,eAAeC,aAAf","sourcesContent":["import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React from 'react'; // This variable will be true once the server-side hydration is completed.\n\nvar hydrationCompleted = false;\n\nfunction useMediaQuery(queryInput) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var query = queryInput.replace('@media ', '');\n  var _options$defaultMatch = options.defaultMatches,\n      defaultMatches = _options$defaultMatch === void 0 ? false : _options$defaultMatch,\n      _options$noSsr = options.noSsr,\n      noSsr = _options$noSsr === void 0 ? false : _options$noSsr,\n      _options$ssrMatchMedi = options.ssrMatchMedia,\n      ssrMatchMedia = _options$ssrMatchMedi === void 0 ? null : _options$ssrMatchMedi;\n\n  var _React$useState = React.useState(function () {\n    if (hydrationCompleted || noSsr) {\n      return window.matchMedia(query).matches;\n    }\n\n    if (ssrMatchMedia) {\n      return ssrMatchMedia(query).matches;\n    } // Once the component is mounted, we rely on the\n    // event listeners to return the correct matches value.\n\n\n    return defaultMatches;\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      matches = _React$useState2[0],\n      setMatches = _React$useState2[1];\n\n  React.useEffect(function () {\n    hydrationCompleted = true;\n    var queryList = window.matchMedia(query);\n    setMatches(queryList.matches);\n\n    function handleMatchesChange(event) {\n      setMatches(event.matches);\n    }\n\n    queryList.addListener(handleMatchesChange);\n    return function () {\n      queryList.removeListener(handleMatchesChange);\n    };\n  }, [query]);\n  return matches;\n}\n\nexport function testReset() {\n  hydrationCompleted = false;\n}\nexport default useMediaQuery;"]},"metadata":{},"sourceType":"module"}