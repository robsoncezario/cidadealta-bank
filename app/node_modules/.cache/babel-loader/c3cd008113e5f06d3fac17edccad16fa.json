{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport warning from 'warning';\nimport Typography from '../Typography';\nimport withStyles from '../styles/withStyles';\nimport withFormControlContext from '../FormControl/withFormControlContext';\nimport FormControlContext from '../FormControl/FormControlContext';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'flex',\n    height: '0.01em',\n    // Fix IE 11 flexbox alignment. To remove at some point.\n    maxHeight: '2em',\n    alignItems: 'center'\n  },\n\n  /* Styles applied to the root element if `variant=\"filled\"`. */\n  filled: {\n    '&$positionStart': {\n      marginTop: 16\n    }\n  },\n\n  /* Styles applied to the root element if `position=\"start\"`. */\n  positionStart: {\n    marginRight: 8\n  },\n\n  /* Styles applied to the root element if `position=\"end\"`. */\n  positionEnd: {\n    marginLeft: 8\n  },\n\n  /* Styles applied to the root element if `disablePointerEvents=true`. */\n  disablePointerEvents: {\n    pointerEvents: 'none'\n  }\n};\nvar InputAdornment = React.forwardRef(function InputAdornment(props, ref) {\n  var _clsx;\n\n  var children = props.children,\n      Component = props.component,\n      classes = props.classes,\n      className = props.className,\n      disablePointerEvents = props.disablePointerEvents,\n      disableTypography = props.disableTypography,\n      muiFormControl = props.muiFormControl,\n      position = props.position,\n      variantProp = props.variant,\n      other = _objectWithoutProperties(props, [\"children\", \"component\", \"classes\", \"className\", \"disablePointerEvents\", \"disableTypography\", \"muiFormControl\", \"position\", \"variant\"]);\n\n  var variant = variantProp;\n\n  if (variantProp && muiFormControl) {\n    process.env.NODE_ENV !== \"production\" ? warning(variantProp !== muiFormControl.variant, 'Material-UI: The `InputAdornment` variant infers the variant property ' + 'you do not have to provide one.') : void 0;\n  }\n\n  if (muiFormControl && !variant) {\n    variant = muiFormControl.variant;\n  }\n\n  return React.createElement(FormControlContext.Provider, {\n    value: null\n  }, React.createElement(Component, _extends({\n    className: clsx(classes.root, (_clsx = {}, _defineProperty(_clsx, classes.filled, variant === 'filled'), _defineProperty(_clsx, classes.positionStart, position === 'start'), _defineProperty(_clsx, classes.positionEnd, position === 'end'), _defineProperty(_clsx, classes.disablePointerEvents, disablePointerEvents), _clsx), className),\n    ref: ref\n  }, other), typeof children === 'string' && !disableTypography ? React.createElement(Typography, {\n    color: \"textSecondary\"\n  }, children) : children));\n});\nprocess.env.NODE_ENV !== \"production\" ? InputAdornment.propTypes = {\n  /**\n   * The content of the component, normally an `IconButton` or string.\n   */\n  children: PropTypes.node.isRequired,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * Disable pointer events on the root.\n   * This allows for the content of the adornment to focus the input on click.\n   */\n  disablePointerEvents: PropTypes.bool,\n\n  /**\n   * If children is a string then disable wrapping in a Typography component.\n   */\n  disableTypography: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  muiFormControl: PropTypes.object,\n\n  /**\n   * The position this adornment should appear relative to the `Input`.\n   */\n  position: PropTypes.oneOf(['start', 'end']),\n\n  /**\n   * The variant to use.\n   * Note: If you are using the `TextField` component or the `FormControl` component\n   * you do not have to set this manually.\n   */\n  variant: PropTypes.oneOf(['standard', 'outlined', 'filled'])\n} : void 0;\nInputAdornment.defaultProps = {\n  component: 'div',\n  disablePointerEvents: false,\n  disableTypography: false\n};\nexport default withStyles(styles, {\n  name: 'MuiInputAdornment'\n})(withFormControlContext(InputAdornment));","map":{"version":3,"sources":["C:/Users/robson/Desktop/cidadealta/cidadealta-app/node_modules/@material-ui/core/esm/InputAdornment/InputAdornment.js"],"names":["_extends","_defineProperty","_objectWithoutProperties","React","PropTypes","clsx","warning","Typography","withStyles","withFormControlContext","FormControlContext","styles","root","display","height","maxHeight","alignItems","filled","marginTop","positionStart","marginRight","positionEnd","marginLeft","disablePointerEvents","pointerEvents","InputAdornment","forwardRef","props","ref","_clsx","children","Component","component","classes","className","disableTypography","muiFormControl","position","variantProp","variant","other","process","env","NODE_ENV","createElement","Provider","value","color","propTypes","node","isRequired","object","string","elementType","bool","oneOf","defaultProps","name"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport warning from 'warning';\nimport Typography from '../Typography';\nimport withStyles from '../styles/withStyles';\nimport withFormControlContext from '../FormControl/withFormControlContext';\nimport FormControlContext from '../FormControl/FormControlContext';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'flex',\n    height: '0.01em',\n    // Fix IE 11 flexbox alignment. To remove at some point.\n    maxHeight: '2em',\n    alignItems: 'center'\n  },\n\n  /* Styles applied to the root element if `variant=\"filled\"`. */\n  filled: {\n    '&$positionStart': {\n      marginTop: 16\n    }\n  },\n\n  /* Styles applied to the root element if `position=\"start\"`. */\n  positionStart: {\n    marginRight: 8\n  },\n\n  /* Styles applied to the root element if `position=\"end\"`. */\n  positionEnd: {\n    marginLeft: 8\n  },\n\n  /* Styles applied to the root element if `disablePointerEvents=true`. */\n  disablePointerEvents: {\n    pointerEvents: 'none'\n  }\n};\nvar InputAdornment = React.forwardRef(function InputAdornment(props, ref) {\n  var _clsx;\n\n  var children = props.children,\n      Component = props.component,\n      classes = props.classes,\n      className = props.className,\n      disablePointerEvents = props.disablePointerEvents,\n      disableTypography = props.disableTypography,\n      muiFormControl = props.muiFormControl,\n      position = props.position,\n      variantProp = props.variant,\n      other = _objectWithoutProperties(props, [\"children\", \"component\", \"classes\", \"className\", \"disablePointerEvents\", \"disableTypography\", \"muiFormControl\", \"position\", \"variant\"]);\n\n  var variant = variantProp;\n\n  if (variantProp && muiFormControl) {\n    process.env.NODE_ENV !== \"production\" ? warning(variantProp !== muiFormControl.variant, 'Material-UI: The `InputAdornment` variant infers the variant property ' + 'you do not have to provide one.') : void 0;\n  }\n\n  if (muiFormControl && !variant) {\n    variant = muiFormControl.variant;\n  }\n\n  return React.createElement(FormControlContext.Provider, {\n    value: null\n  }, React.createElement(Component, _extends({\n    className: clsx(classes.root, (_clsx = {}, _defineProperty(_clsx, classes.filled, variant === 'filled'), _defineProperty(_clsx, classes.positionStart, position === 'start'), _defineProperty(_clsx, classes.positionEnd, position === 'end'), _defineProperty(_clsx, classes.disablePointerEvents, disablePointerEvents), _clsx), className),\n    ref: ref\n  }, other), typeof children === 'string' && !disableTypography ? React.createElement(Typography, {\n    color: \"textSecondary\"\n  }, children) : children));\n});\nprocess.env.NODE_ENV !== \"production\" ? InputAdornment.propTypes = {\n  /**\n   * The content of the component, normally an `IconButton` or string.\n   */\n  children: PropTypes.node.isRequired,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * Disable pointer events on the root.\n   * This allows for the content of the adornment to focus the input on click.\n   */\n  disablePointerEvents: PropTypes.bool,\n\n  /**\n   * If children is a string then disable wrapping in a Typography component.\n   */\n  disableTypography: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  muiFormControl: PropTypes.object,\n\n  /**\n   * The position this adornment should appear relative to the `Input`.\n   */\n  position: PropTypes.oneOf(['start', 'end']),\n\n  /**\n   * The variant to use.\n   * Note: If you are using the `TextField` component or the `FormControl` component\n   * you do not have to set this manually.\n   */\n  variant: PropTypes.oneOf(['standard', 'outlined', 'filled'])\n} : void 0;\nInputAdornment.defaultProps = {\n  component: 'div',\n  disablePointerEvents: false,\n  disableTypography: false\n};\nexport default withStyles(styles, {\n  name: 'MuiInputAdornment'\n})(withFormControlContext(InputAdornment));"]},"metadata":{},"sourceType":"module"}