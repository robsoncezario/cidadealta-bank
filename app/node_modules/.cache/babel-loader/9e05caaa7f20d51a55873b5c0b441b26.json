{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\"; // @inheritedComponent InputBase\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport InputBase from '../InputBase';\nimport NotchedOutline from './NotchedOutline';\nimport withStyles from '../styles/withStyles';\nexport var styles = function styles(theme) {\n  var borderColor = theme.palette.type === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)';\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      position: 'relative',\n      '& $notchedOutline': {\n        borderColor: borderColor\n      },\n      '&:hover $notchedOutline': {\n        borderColor: theme.palette.text.primary,\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          borderColor: borderColor\n        }\n      },\n      '&$focused $notchedOutline': {\n        borderColor: theme.palette.primary.main,\n        borderWidth: 2\n      },\n      '&$error $notchedOutline': {\n        borderColor: theme.palette.error.main\n      },\n      '&$disabled $notchedOutline': {\n        borderColor: theme.palette.action.disabled\n      }\n    },\n\n    /* Styles applied to the root element if the component is focused. */\n    focused: {},\n\n    /* Styles applied to the root element if `disabled={true}`. */\n    disabled: {},\n\n    /* Styles applied to the root element if `startAdornment` is provided. */\n    adornedStart: {\n      paddingLeft: 14\n    },\n\n    /* Styles applied to the root element if `endAdornment` is provided. */\n    adornedEnd: {\n      paddingRight: 14\n    },\n\n    /* Styles applied to the root element if `error={true}`. */\n    error: {},\n\n    /* Styles applied to the root element if `multiline={true}`. */\n    multiline: {\n      padding: '18.5px 14px'\n    },\n\n    /* Styles applied to the `NotchedOutline` element. */\n    notchedOutline: {},\n\n    /* Styles applied to the `input` element. */\n    input: {\n      padding: '18.5px 14px'\n    },\n\n    /* Styles applied to the `input` element if `margin=\"dense\"`. */\n    inputMarginDense: {\n      paddingTop: 15,\n      paddingBottom: 15\n    },\n\n    /* Styles applied to the `input` element if `multiline={true}`. */\n    inputMultiline: {\n      padding: 0\n    },\n\n    /* Styles applied to the `input` element if `startAdornment` is provided. */\n    inputAdornedStart: {\n      paddingLeft: 0\n    },\n\n    /* Styles applied to the `input` element if `endAdornment` is provided. */\n    inputAdornedEnd: {\n      paddingRight: 0\n    }\n  };\n};\nvar OutlinedInput = React.forwardRef(function OutlinedInput(props, ref) {\n  var classes = props.classes,\n      labelWidth = props.labelWidth,\n      notched = props.notched,\n      other = _objectWithoutProperties(props, [\"classes\", \"labelWidth\", \"notched\"]);\n\n  return React.createElement(InputBase, _extends({\n    renderPrefix: function renderPrefix(state) {\n      return React.createElement(NotchedOutline, {\n        className: classes.notchedOutline,\n        labelWidth: labelWidth,\n        notched: typeof notched !== 'undefined' ? notched : Boolean(state.startAdornment || state.filled || state.focused)\n      });\n    },\n    classes: _extends({}, classes, {\n      root: clsx(classes.root, classes.underline),\n      notchedOutline: null\n    }),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? OutlinedInput.propTypes = {\n  /**\n   * This property helps users to fill forms faster, especially on mobile devices.\n   * The name can be confusing, as it's more like an autofill.\n   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).\n   */\n  autoComplete: PropTypes.string,\n\n  /**\n   * If `true`, the `input` element will be focused during the first mount.\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * The CSS class name of the wrapper element.\n   */\n  className: PropTypes.string,\n\n  /**\n   * The default `input` element value, useful when not controlling the component.\n   */\n  defaultValue: PropTypes.any,\n\n  /**\n   * If `true`, the `input` element will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * End `InputAdornment` for this component.\n   */\n  endAdornment: PropTypes.node,\n\n  /**\n   * If `true`, the input will indicate an error. This is normally obtained via context from\n   * FormControl.\n   */\n  error: PropTypes.bool,\n\n  /**\n   * If `true`, the input will take up the full width of its container.\n   */\n  fullWidth: PropTypes.bool,\n\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n\n  /**\n   * The component used for the native input.\n   * Either a string to use a DOM element or a component.\n   */\n  inputComponent: PropTypes.elementType,\n\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * This property can be used to pass a ref callback to the `input` element.\n   */\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n\n  /**\n   * The width of the legend.\n   */\n  labelWidth: PropTypes.number.isRequired,\n\n  /**\n   * If `dense`, will adjust vertical spacing. This is normally obtained via context from\n   * FormControl.\n   */\n  margin: PropTypes.oneOf(['dense', 'none']),\n\n  /**\n   * If `true`, a textarea element will be rendered.\n   */\n  multiline: PropTypes.bool,\n\n  /**\n   * Name attribute of the `input` element.\n   */\n  name: PropTypes.string,\n\n  /**\n   * If `true`, the outline is notched to accommodate the label.\n   */\n  notched: PropTypes.bool,\n\n  /**\n   * Callback fired when the value is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value`.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * The short hint displayed in the input before the user enters a value.\n   */\n  placeholder: PropTypes.string,\n\n  /**\n   * It prevents the user from changing the value of the field\n   * (not from interacting with the field).\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * If `true`, the `input` element will be required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * Number of rows to display when multiline option is set to true.\n   */\n  rows: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * Maximum number of rows to display when multiline option is set to true.\n   */\n  rowsMax: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * Start `InputAdornment` for this component.\n   */\n  startAdornment: PropTypes.node,\n\n  /**\n   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).\n   */\n  type: PropTypes.string,\n\n  /**\n   * The value of the `input` element, required for a controlled component.\n   */\n  value: PropTypes.any\n} : void 0;\nInputBase.defaultProps = {\n  fullWidth: false,\n  inputComponent: 'input',\n  multiline: false,\n  type: 'text'\n};\nOutlinedInput.muiName = 'Input';\nexport default withStyles(styles, {\n  name: 'MuiOutlinedInput'\n})(OutlinedInput);","map":{"version":3,"sources":["C:/Users/robson/Desktop/cidadealta/cidadealta-app/node_modules/@material-ui/core/esm/OutlinedInput/OutlinedInput.js"],"names":["_extends","_objectWithoutProperties","React","PropTypes","clsx","InputBase","NotchedOutline","withStyles","styles","theme","borderColor","palette","type","root","position","text","primary","main","borderWidth","error","action","disabled","focused","adornedStart","paddingLeft","adornedEnd","paddingRight","multiline","padding","notchedOutline","input","inputMarginDense","paddingTop","paddingBottom","inputMultiline","inputAdornedStart","inputAdornedEnd","OutlinedInput","forwardRef","props","ref","classes","labelWidth","notched","other","createElement","renderPrefix","state","className","Boolean","startAdornment","filled","underline","process","env","NODE_ENV","propTypes","autoComplete","string","autoFocus","bool","object","isRequired","defaultValue","any","endAdornment","node","fullWidth","id","inputComponent","elementType","inputProps","inputRef","oneOfType","func","number","margin","oneOf","name","onChange","placeholder","readOnly","required","rows","rowsMax","value","defaultProps","muiName"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\n// @inheritedComponent InputBase\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport InputBase from '../InputBase';\nimport NotchedOutline from './NotchedOutline';\nimport withStyles from '../styles/withStyles';\nexport var styles = function styles(theme) {\n  var borderColor = theme.palette.type === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)';\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      position: 'relative',\n      '& $notchedOutline': {\n        borderColor: borderColor\n      },\n      '&:hover $notchedOutline': {\n        borderColor: theme.palette.text.primary,\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          borderColor: borderColor\n        }\n      },\n      '&$focused $notchedOutline': {\n        borderColor: theme.palette.primary.main,\n        borderWidth: 2\n      },\n      '&$error $notchedOutline': {\n        borderColor: theme.palette.error.main\n      },\n      '&$disabled $notchedOutline': {\n        borderColor: theme.palette.action.disabled\n      }\n    },\n\n    /* Styles applied to the root element if the component is focused. */\n    focused: {},\n\n    /* Styles applied to the root element if `disabled={true}`. */\n    disabled: {},\n\n    /* Styles applied to the root element if `startAdornment` is provided. */\n    adornedStart: {\n      paddingLeft: 14\n    },\n\n    /* Styles applied to the root element if `endAdornment` is provided. */\n    adornedEnd: {\n      paddingRight: 14\n    },\n\n    /* Styles applied to the root element if `error={true}`. */\n    error: {},\n\n    /* Styles applied to the root element if `multiline={true}`. */\n    multiline: {\n      padding: '18.5px 14px'\n    },\n\n    /* Styles applied to the `NotchedOutline` element. */\n    notchedOutline: {},\n\n    /* Styles applied to the `input` element. */\n    input: {\n      padding: '18.5px 14px'\n    },\n\n    /* Styles applied to the `input` element if `margin=\"dense\"`. */\n    inputMarginDense: {\n      paddingTop: 15,\n      paddingBottom: 15\n    },\n\n    /* Styles applied to the `input` element if `multiline={true}`. */\n    inputMultiline: {\n      padding: 0\n    },\n\n    /* Styles applied to the `input` element if `startAdornment` is provided. */\n    inputAdornedStart: {\n      paddingLeft: 0\n    },\n\n    /* Styles applied to the `input` element if `endAdornment` is provided. */\n    inputAdornedEnd: {\n      paddingRight: 0\n    }\n  };\n};\nvar OutlinedInput = React.forwardRef(function OutlinedInput(props, ref) {\n  var classes = props.classes,\n      labelWidth = props.labelWidth,\n      notched = props.notched,\n      other = _objectWithoutProperties(props, [\"classes\", \"labelWidth\", \"notched\"]);\n\n  return React.createElement(InputBase, _extends({\n    renderPrefix: function renderPrefix(state) {\n      return React.createElement(NotchedOutline, {\n        className: classes.notchedOutline,\n        labelWidth: labelWidth,\n        notched: typeof notched !== 'undefined' ? notched : Boolean(state.startAdornment || state.filled || state.focused)\n      });\n    },\n    classes: _extends({}, classes, {\n      root: clsx(classes.root, classes.underline),\n      notchedOutline: null\n    }),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? OutlinedInput.propTypes = {\n  /**\n   * This property helps users to fill forms faster, especially on mobile devices.\n   * The name can be confusing, as it's more like an autofill.\n   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).\n   */\n  autoComplete: PropTypes.string,\n\n  /**\n   * If `true`, the `input` element will be focused during the first mount.\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * The CSS class name of the wrapper element.\n   */\n  className: PropTypes.string,\n\n  /**\n   * The default `input` element value, useful when not controlling the component.\n   */\n  defaultValue: PropTypes.any,\n\n  /**\n   * If `true`, the `input` element will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * End `InputAdornment` for this component.\n   */\n  endAdornment: PropTypes.node,\n\n  /**\n   * If `true`, the input will indicate an error. This is normally obtained via context from\n   * FormControl.\n   */\n  error: PropTypes.bool,\n\n  /**\n   * If `true`, the input will take up the full width of its container.\n   */\n  fullWidth: PropTypes.bool,\n\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n\n  /**\n   * The component used for the native input.\n   * Either a string to use a DOM element or a component.\n   */\n  inputComponent: PropTypes.elementType,\n\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * This property can be used to pass a ref callback to the `input` element.\n   */\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n\n  /**\n   * The width of the legend.\n   */\n  labelWidth: PropTypes.number.isRequired,\n\n  /**\n   * If `dense`, will adjust vertical spacing. This is normally obtained via context from\n   * FormControl.\n   */\n  margin: PropTypes.oneOf(['dense', 'none']),\n\n  /**\n   * If `true`, a textarea element will be rendered.\n   */\n  multiline: PropTypes.bool,\n\n  /**\n   * Name attribute of the `input` element.\n   */\n  name: PropTypes.string,\n\n  /**\n   * If `true`, the outline is notched to accommodate the label.\n   */\n  notched: PropTypes.bool,\n\n  /**\n   * Callback fired when the value is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value`.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * The short hint displayed in the input before the user enters a value.\n   */\n  placeholder: PropTypes.string,\n\n  /**\n   * It prevents the user from changing the value of the field\n   * (not from interacting with the field).\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * If `true`, the `input` element will be required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * Number of rows to display when multiline option is set to true.\n   */\n  rows: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * Maximum number of rows to display when multiline option is set to true.\n   */\n  rowsMax: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * Start `InputAdornment` for this component.\n   */\n  startAdornment: PropTypes.node,\n\n  /**\n   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).\n   */\n  type: PropTypes.string,\n\n  /**\n   * The value of the `input` element, required for a controlled component.\n   */\n  value: PropTypes.any\n} : void 0;\nInputBase.defaultProps = {\n  fullWidth: false,\n  inputComponent: 'input',\n  multiline: false,\n  type: 'text'\n};\nOutlinedInput.muiName = 'Input';\nexport default withStyles(styles, {\n  name: 'MuiOutlinedInput'\n})(OutlinedInput);"]},"metadata":{},"sourceType":"module"}