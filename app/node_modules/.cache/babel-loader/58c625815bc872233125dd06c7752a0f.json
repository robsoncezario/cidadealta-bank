{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\"; // @inheritedComponent EventListener\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport EventListener from 'react-event-listener';\nimport ownerDocument from '../utils/ownerDocument';\nimport { useForkRef } from '../utils/reactHelpers';\n\nfunction useMountedRef() {\n  var mountedRef = React.useRef(false);\n  React.useEffect(function () {\n    mountedRef.current = true;\n    return function () {\n      mountedRef.current = false;\n    };\n  }, []);\n  return mountedRef;\n}\n/**\n * Listen for click events that occur somewhere in the document, outside of the element itself.\n * For instance, if you need to hide a menu when people click anywhere else on your page.\n */\n\n\nfunction ClickAwayListener(props) {\n  var children = props.children,\n      mouseEvent = props.mouseEvent,\n      touchEvent = props.touchEvent,\n      onClickAway = props.onClickAway,\n      other = _objectWithoutProperties(props, [\"children\", \"mouseEvent\", \"touchEvent\", \"onClickAway\"]);\n\n  var mountedRef = useMountedRef();\n  var movedRef = React.useRef(false);\n  var nodeRef = React.useRef(); // can be removed once we drop support for non ref forwarding class components\n\n  var handleOwnRef = React.useCallback(function (ref) {\n    nodeRef.current = ReactDOM.findDOMNode(ref);\n  }, []);\n  var handleRef = useForkRef(children.ref, handleOwnRef);\n  var handleClickAway = React.useCallback(function (event) {\n    // Ignore events that have been `event.preventDefault()` marked.\n    if (event.defaultPrevented) {\n      return;\n    } // IE 11 support, which trigger the handleClickAway even after the unbind\n\n\n    if (!mountedRef.current) {\n      return;\n    } // Do not act if user performed touchmove\n\n\n    if (movedRef.current) {\n      movedRef.current = false;\n      return;\n    }\n\n    var node = nodeRef.current; // The child might render null.\n\n    if (!node) {\n      return;\n    }\n\n    var doc = ownerDocument(node);\n\n    if (doc.documentElement && doc.documentElement.contains(event.target) && !node.contains(event.target)) {\n      onClickAway(event);\n    }\n  }, [mountedRef, onClickAway]);\n  var handleTouchMove = React.useCallback(function () {\n    movedRef.current = true;\n  }, []);\n  var listenerProps = {};\n\n  if (mouseEvent !== false) {\n    listenerProps[mouseEvent] = handleClickAway;\n  }\n\n  if (touchEvent !== false) {\n    listenerProps[touchEvent] = handleClickAway;\n    listenerProps.onTouchMove = handleTouchMove;\n  }\n\n  return React.createElement(React.Fragment, null, React.cloneElement(children, {\n    ref: handleRef\n  }), React.createElement(EventListener, _extends({\n    target: \"document\"\n  }, listenerProps, other)));\n}\n\nprocess.env.NODE_ENV !== \"production\" ? ClickAwayListener.propTypes = {\n  /**\n   * The wrapped element.\n   *\n   * ⚠️The component used as a child [must be able to hold a ref](/guides/composition/#children).\n   */\n  children: PropTypes.element.isRequired,\n\n  /**\n   * The mouse event to listen to. You can disable the listener by providing `false`.\n   */\n  mouseEvent: PropTypes.oneOf(['onClick', 'onMouseDown', 'onMouseUp', false]),\n\n  /**\n   * Callback fired when a \"click away\" event is detected.\n   */\n  onClickAway: PropTypes.func.isRequired,\n\n  /**\n   * The touch event to listen to. You can disable the listener by providing `false`.\n   */\n  touchEvent: PropTypes.oneOf(['onTouchStart', 'onTouchEnd', false])\n} : void 0;\nClickAwayListener.defaultProps = {\n  mouseEvent: 'onMouseUp',\n  touchEvent: 'onTouchEnd'\n};\nexport default ClickAwayListener;","map":{"version":3,"sources":["C:/Users/robson/Desktop/cidadealta/cidadealta-app/node_modules/@material-ui/core/esm/ClickAwayListener/ClickAwayListener.js"],"names":["_extends","_objectWithoutProperties","React","ReactDOM","PropTypes","EventListener","ownerDocument","useForkRef","useMountedRef","mountedRef","useRef","useEffect","current","ClickAwayListener","props","children","mouseEvent","touchEvent","onClickAway","other","movedRef","nodeRef","handleOwnRef","useCallback","ref","findDOMNode","handleRef","handleClickAway","event","defaultPrevented","node","doc","documentElement","contains","target","handleTouchMove","listenerProps","onTouchMove","createElement","Fragment","cloneElement","process","env","NODE_ENV","propTypes","element","isRequired","oneOf","func","defaultProps"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\n// @inheritedComponent EventListener\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport EventListener from 'react-event-listener';\nimport ownerDocument from '../utils/ownerDocument';\nimport { useForkRef } from '../utils/reactHelpers';\n\nfunction useMountedRef() {\n  var mountedRef = React.useRef(false);\n  React.useEffect(function () {\n    mountedRef.current = true;\n    return function () {\n      mountedRef.current = false;\n    };\n  }, []);\n  return mountedRef;\n}\n/**\n * Listen for click events that occur somewhere in the document, outside of the element itself.\n * For instance, if you need to hide a menu when people click anywhere else on your page.\n */\n\n\nfunction ClickAwayListener(props) {\n  var children = props.children,\n      mouseEvent = props.mouseEvent,\n      touchEvent = props.touchEvent,\n      onClickAway = props.onClickAway,\n      other = _objectWithoutProperties(props, [\"children\", \"mouseEvent\", \"touchEvent\", \"onClickAway\"]);\n\n  var mountedRef = useMountedRef();\n  var movedRef = React.useRef(false);\n  var nodeRef = React.useRef(); // can be removed once we drop support for non ref forwarding class components\n\n  var handleOwnRef = React.useCallback(function (ref) {\n    nodeRef.current = ReactDOM.findDOMNode(ref);\n  }, []);\n  var handleRef = useForkRef(children.ref, handleOwnRef);\n  var handleClickAway = React.useCallback(function (event) {\n    // Ignore events that have been `event.preventDefault()` marked.\n    if (event.defaultPrevented) {\n      return;\n    } // IE 11 support, which trigger the handleClickAway even after the unbind\n\n\n    if (!mountedRef.current) {\n      return;\n    } // Do not act if user performed touchmove\n\n\n    if (movedRef.current) {\n      movedRef.current = false;\n      return;\n    }\n\n    var node = nodeRef.current; // The child might render null.\n\n    if (!node) {\n      return;\n    }\n\n    var doc = ownerDocument(node);\n\n    if (doc.documentElement && doc.documentElement.contains(event.target) && !node.contains(event.target)) {\n      onClickAway(event);\n    }\n  }, [mountedRef, onClickAway]);\n  var handleTouchMove = React.useCallback(function () {\n    movedRef.current = true;\n  }, []);\n  var listenerProps = {};\n\n  if (mouseEvent !== false) {\n    listenerProps[mouseEvent] = handleClickAway;\n  }\n\n  if (touchEvent !== false) {\n    listenerProps[touchEvent] = handleClickAway;\n    listenerProps.onTouchMove = handleTouchMove;\n  }\n\n  return React.createElement(React.Fragment, null, React.cloneElement(children, {\n    ref: handleRef\n  }), React.createElement(EventListener, _extends({\n    target: \"document\"\n  }, listenerProps, other)));\n}\n\nprocess.env.NODE_ENV !== \"production\" ? ClickAwayListener.propTypes = {\n  /**\n   * The wrapped element.\n   *\n   * ⚠️The component used as a child [must be able to hold a ref](/guides/composition/#children).\n   */\n  children: PropTypes.element.isRequired,\n\n  /**\n   * The mouse event to listen to. You can disable the listener by providing `false`.\n   */\n  mouseEvent: PropTypes.oneOf(['onClick', 'onMouseDown', 'onMouseUp', false]),\n\n  /**\n   * Callback fired when a \"click away\" event is detected.\n   */\n  onClickAway: PropTypes.func.isRequired,\n\n  /**\n   * The touch event to listen to. You can disable the listener by providing `false`.\n   */\n  touchEvent: PropTypes.oneOf(['onTouchStart', 'onTouchEnd', false])\n} : void 0;\nClickAwayListener.defaultProps = {\n  mouseEvent: 'onMouseUp',\n  touchEvent: 'onTouchEnd'\n};\nexport default ClickAwayListener;"]},"metadata":{},"sourceType":"module"}