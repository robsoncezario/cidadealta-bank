{"ast":null,"code":"export class BankService {}\n\nBankService.getDetails = async userId => {\n  const response = await fetch(`http://localhost:5000/fivem/users/${userId}`, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  console.log(response);\n  return response;\n};\n\nBankService.deposit = async (userId, amount) => {\n  const response = await fetch('http://localhost:5000/fivem/users/deposit', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      Id: userId,\n      Amount: amount\n    })\n  });\n  const result = await response.json();\n  return result;\n};\n\nBankService.withdraw = async (userId, amount) => {\n  const response = await fetch('http://localhost:5000/fivem/users/withdraw', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      Id: userId,\n      Amount: amount\n    })\n  });\n  const result = await response.json();\n  return result;\n};\n\nBankService.transfer = async (userId, targetId, amount) => {\n  const response = await fetch('http://localhost:5000/fivem/users/transfer', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      Id: userId,\n      TargetId: targetId,\n      Amount: amount\n    })\n  });\n  const result = await response.json();\n  return result;\n};\n\nBankService.getBalance = async (userId, page, pageSize = 10, selectedDate) => {\n  const startAt = selectedDate && selectedDate[0] && Math.floor(selectedDate[0].getTime() / 1000);\n  const endAt = selectedDate && selectedDate[1] && Math.floor(selectedDate[1].getTime() / 1000);\n  const response = await fetch('http://localhost:5000/fivem/users/balance', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      Id: userId,\n      CurrentPage: page,\n      PageSize: pageSize,\n      StartAt: startAt,\n      EndAt: endAt\n    })\n  });\n  const result = await response.json();\n  return result;\n};","map":{"version":3,"sources":["C:/Users/robson/Desktop/cidadealta/cidadealta-app/src/services/service.ts"],"names":["BankService","getDetails","userId","response","fetch","method","headers","console","log","deposit","amount","body","JSON","stringify","Id","Amount","result","json","withdraw","transfer","targetId","TargetId","getBalance","page","pageSize","selectedDate","startAt","Math","floor","getTime","endAt","CurrentPage","PageSize","StartAt","EndAt"],"mappings":"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","sourcesContent":["import { DateRange } from \"@material-ui/pickers/src/DateRangePicker/RangeTypes\";\r\n\r\nexport class BankService {\r\n  static getDetails = async (userId: number) => {\r\n    const response = await fetch(`http://localhost:5000/fivem/users/${userId}`, {\r\n      method: 'GET',\r\n      headers: {'Content-Type': 'application/json'}\r\n    });\r\n\r\n    console.log(response);\r\n\r\n    return response;\r\n  }\r\n\r\n  static deposit = async (userId: number, amount: number) => {\r\n    const response = await fetch('http://localhost:5000/fivem/users/deposit', {\r\n      method: 'POST',\r\n      headers: {'Content-Type': 'application/json'},\r\n      body: JSON.stringify({\r\n        Id: userId,\r\n        Amount: amount\r\n      })\r\n    });\r\n\r\n    const result = await response.json();\r\n    return result;\r\n  }\r\n\r\n  static withdraw = async (userId: number, amount: number) => {\r\n    const response = await fetch('http://localhost:5000/fivem/users/withdraw', {\r\n      method: 'POST',\r\n      headers: {'Content-Type': 'application/json'},\r\n      body: JSON.stringify({\r\n        Id: userId,\r\n        Amount: amount\r\n      })\r\n    });\r\n\r\n    const result = await response.json();\r\n    return result;\r\n  }\r\n\r\n  static transfer = async (userId: number, targetId: number, amount: number) => {\r\n    const response = await fetch('http://localhost:5000/fivem/users/transfer', {\r\n      method: 'POST',\r\n      headers: {'Content-Type': 'application/json'},\r\n      body: JSON.stringify({\r\n        Id: userId,\r\n        TargetId: targetId,\r\n        Amount: amount\r\n      })\r\n    });\r\n\r\n    const result = await response.json();\r\n    return result;\r\n  }\r\n\r\n  static getBalance = async (userId: number, page: number, pageSize: number = 10, selectedDate?: DateRange) => {\r\n    const startAt = selectedDate && selectedDate[0] && Math.floor(selectedDate[0]!.getTime() / 1000);\r\n    const endAt = selectedDate && selectedDate[1] && Math.floor(selectedDate[1]!.getTime() / 1000);\r\n\r\n    const response = await fetch('http://localhost:5000/fivem/users/balance', {\r\n      method: 'POST',\r\n      headers: {'Content-Type': 'application/json'},\r\n      body: JSON.stringify({\r\n        Id: userId,\r\n        CurrentPage: page,\r\n        PageSize: pageSize,\r\n        StartAt: startAt,\r\n        EndAt: endAt\r\n      })\r\n    });\r\n    const result = await response.json();\r\n\r\n    return result;\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}