{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\robson\\\\Desktop\\\\drip\\\\server-data\\\\resources\\\\[drip]\\\\drip_bank\\\\src\\\\screens\\\\Withdraw\\\\index.tsx\";\nimport React from 'react';\nimport { Typography, TextField } from '@material-ui/core';\nimport NumberFormat from 'react-number-format';\nimport { useRecoilState } from 'recoil';\nimport * as atoms from '../../navigation/atoms';\nimport SubmitButtonWithSelector from '../../components/SubmitButtonWithSelector';\nconst styles = {\n  container: {\n    width: '100%',\n    height: '30vh',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    flexDirection: 'column'\n  },\n  buttonContainer: {\n    width: '100%',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    flexDirection: 'column',\n    boxSizing: 'border-box',\n    padding: '1vh'\n  },\n  icon: {\n    width: '3vh',\n    height: '3vh'\n  },\n  withDescription: {\n    display: 'flex',\n    alignItems: 'flex-start',\n    justifyContent: 'flex-start',\n    flexDirection: 'column'\n  },\n  withSpace: {\n    marginLeft: '1vh'\n  }\n};\n\nfunction NumberFormatCustom(props) {\n  const {\n    inputRef,\n    onChange,\n    ...other\n  } = props;\n  return React.createElement(NumberFormat, Object.assign({}, other, {\n    getInputRef: inputRef,\n    onValueChange: values => {\n      onChange({\n        target: {\n          name: props.name,\n          value: values.value\n        }\n      });\n    },\n    thousandSeparator: true,\n    isNumericString: true,\n    prefix: \"$\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }));\n}\n\nconst WithdrawScreen = () => {\n  const [account, setAccount] = useRecoilState(atoms.navigationAtom);\n  const [amount, setAmount] = React.useState(account.account.bankMoney.toString());\n\n  const handleChange = event => {\n    setAmount(event.target.value);\n    setAccount(prevState => ({ ...prevState,\n      withdrawInput: parseInt(event.target.value)\n    }));\n  };\n\n  const handleWithdraw = () => {};\n\n  return React.createElement(\"div\", {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    style: styles.buttonContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    style: styles.withDescription,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"subtitle2\",\n    component: \"div\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, \"Quanto voc\\xEA gostaria de sacar?\"), React.createElement(Typography, {\n    variant: \"body2\",\n    component: \"div\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, \"Voc\\xEA tem \", new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD'\n  }).format(account.account.bankMoney), \" dispon\\xEDvel\"), React.createElement(TextField, {\n    label: \"\",\n    value: amount,\n    onChange: handleChange,\n    id: \"formatted-numberformat-input\",\n    InputProps: {\n      inputComponent: NumberFormatCustom\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }))), React.createElement(SubmitButtonWithSelector, {\n    label: \"Sacar \\u279D\",\n    selector: atoms.withdrawSelector,\n    onClick: handleWithdraw,\n    fullWidth: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }));\n};\n\nexport default WithdrawScreen;","map":{"version":3,"sources":["C:/Users/robson/Desktop/drip/server-data/resources/[drip]/drip_bank/src/screens/Withdraw/index.tsx"],"names":["React","Typography","TextField","NumberFormat","useRecoilState","atoms","SubmitButtonWithSelector","styles","container","width","height","display","alignItems","justifyContent","flexDirection","buttonContainer","boxSizing","padding","icon","withDescription","withSpace","marginLeft","NumberFormatCustom","props","inputRef","onChange","other","values","target","name","value","WithdrawScreen","account","setAccount","navigationAtom","amount","setAmount","useState","bankMoney","toString","handleChange","event","prevState","withdrawInput","parseInt","handleWithdraw","Intl","style","currency","format","inputComponent","withdrawSelector"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport { \r\n  Typography,\r\n  TextField,\r\n  withStyles\r\n} from '@material-ui/core';\r\nimport NumberFormat from 'react-number-format';\r\nimport { useRecoilState } from 'recoil';\r\nimport * as atoms from '../../navigation/atoms';\r\nimport SubmitButtonWithSelector from '../../components/SubmitButtonWithSelector';\r\n\r\nconst styles = {\r\n  container: {\r\n    width: '100%',\r\n    height: '30vh',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    flexDirection: 'column'\r\n  } as React.CSSProperties,\r\n\r\n  buttonContainer: {\r\n    width: '100%',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    flexDirection: 'column',\r\n    boxSizing: 'border-box',\r\n    padding: '1vh'\r\n  } as React.CSSProperties,\r\n\r\n  icon: {\r\n    width: '3vh',\r\n    height: '3vh'\r\n  } as React.CSSProperties,\r\n\r\n  withDescription: {\r\n    display: 'flex',\r\n    alignItems: 'flex-start',\r\n    justifyContent: 'flex-start',\r\n    flexDirection: 'column'\r\n  } as React.CSSProperties,\r\n\r\n  withSpace: {\r\n    marginLeft: '1vh'\r\n  } as React.CSSProperties\r\n}\r\n\r\ninterface NumberFormatCustomProps {\r\n  inputRef: (instance: NumberFormat | null) => void;\r\n  onChange: (event: { target: { name: string; value: string } }) => void;\r\n  name: string;\r\n}\r\n\r\nfunction NumberFormatCustom(props: NumberFormatCustomProps) {\r\n  const {inputRef, onChange, ...other} = props;\r\n\r\n  return (\r\n    <NumberFormat\r\n      {...other}\r\n      getInputRef={inputRef}\r\n      onValueChange={(values) => {\r\n        onChange({\r\n          target: {\r\n            name: props.name,\r\n            value: values.value,\r\n          },\r\n        });\r\n      }}\r\n      thousandSeparator\r\n      isNumericString\r\n      prefix=\"$\"\r\n    />\r\n  );\r\n}\r\n\r\nconst WithdrawScreen = () => {\r\n  const [account, setAccount] = useRecoilState(atoms.navigationAtom);\r\n  const [amount, setAmount] = React.useState(account.account.bankMoney.toString());\r\n\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setAmount(event.target.value as string);\r\n    setAccount(prevState => ({ \r\n      ...prevState,\r\n      withdrawInput: parseInt(event.target.value as string)\r\n    }))\r\n  };\r\n\r\n  const handleWithdraw = () => {\r\n\r\n  }\r\n\r\n  return (\r\n    <div style={styles.container}>\r\n      <div style={styles.buttonContainer}>\r\n        <div style={styles.withDescription}>\r\n          <Typography \r\n            variant='subtitle2' \r\n            component='div'>\r\n            Quanto você gostaria de sacar?\r\n          </Typography>\r\n\r\n          <Typography \r\n            variant='body2' \r\n            component='div'>\r\n            Você tem {new Intl.NumberFormat('en-US', { \r\n              style: 'currency', \r\n              currency: 'USD'\r\n            }).format(account.account.bankMoney)} disponível\r\n          </Typography>\r\n\r\n          <TextField\r\n            label=\"\"\r\n            value={amount}\r\n            onChange={handleChange}\r\n            id=\"formatted-numberformat-input\"\r\n            InputProps={{\r\n              inputComponent: NumberFormatCustom as any,\r\n            }}\r\n          />\r\n        </div>\r\n      </div>  \r\n\r\n      <SubmitButtonWithSelector\r\n          label='Sacar ➝'\r\n          selector={atoms.withdrawSelector}\r\n          onClick={handleWithdraw}\r\n          fullWidth={true} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WithdrawScreen;"]},"metadata":{},"sourceType":"module"}