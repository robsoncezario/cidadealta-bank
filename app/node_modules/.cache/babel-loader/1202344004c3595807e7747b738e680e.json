{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\robson\\\\Desktop\\\\cidadealta\\\\cidadealta-app\\\\src\\\\screens\\\\Transfer\\\\index.tsx\";\nimport React, { useState } from 'react';\nimport { Typography, TextField } from '@material-ui/core';\nimport NumberFormat from 'react-number-format';\nimport { useRecoilState } from 'recoil';\nimport * as atoms from '../../navigation/atoms';\nimport SubmitButtonWithSelector from '../../components/SubmitButtonWithSelector';\nimport { BankService } from '../../services/service';\nconst styles = {\n  container: {\n    width: '100%',\n    height: '65vh',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    flexDirection: 'column'\n  },\n  buttonContainer: {\n    width: '100%',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    flexDirection: 'column',\n    boxSizing: 'border-box',\n    padding: '1vh'\n  },\n  icon: {\n    width: '3vh',\n    height: '3vh'\n  },\n  withDescription: {\n    display: 'flex',\n    alignItems: 'flex-start',\n    justifyContent: 'flex-start',\n    flexDirection: 'column'\n  },\n  wrapper: {\n    marginTop: '1vh',\n    width: '30vw'\n  }\n};\n\nfunction NumberFormatCustom(props) {\n  const {\n    inputRef,\n    onChange,\n    ...other\n  } = props;\n  return React.createElement(NumberFormat, Object.assign({}, other, {\n    getInputRef: inputRef,\n    onValueChange: values => {\n      onChange({\n        target: {\n          name: props.name,\n          value: values.value\n        }\n      });\n    },\n    thousandSeparator: true,\n    isNumericString: true,\n    prefix: \"$\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }));\n}\n\nconst TransferScreen = () => {\n  const [data, setAccount] = useRecoilState(atoms.navigationAtom);\n  const [amount, setAmount] = useState(data.account.bankMoney.toString());\n  const [playerId, setPlayerId] = useState(null);\n  const isDisabled = !(data.account.bankMoney >= parseInt(amount) && parseInt(amount) >= 1) || !playerId || parseInt(playerId) === data.account.id || parseInt(playerId) > 10000 || parseInt(playerId) < 1;\n\n  const handleChangePlayerId = event => {\n    setPlayerId(event.target.value);\n  };\n\n  const handleOnInput = event => {\n    event.target.value = (event.target.value || ' ').replace(/\\D+/g, '').trim();\n  };\n\n  const handleChange = event => {\n    setAmount(event.target.value);\n  };\n\n  const handleTransfer = () => {\n    const value = parseInt(amount);\n    setAccount(prevState => ({ ...prevState,\n      account: { ...prevState.account,\n        ...{\n          bankMoney: data.account.bankMoney - value\n        }\n      },\n      isAsyncRequesting: true\n    }));\n\n    async function transfer() {\n      await BankService.transfer(data.account.id, playerId, value);\n      setAccount(prevState => ({ ...prevState,\n        isAsyncRequesting: false\n      }));\n    }\n\n    deposit();\n  };\n\n  return React.createElement(\"div\", {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    style: styles.buttonContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    style: styles.withDescription,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"subtitle2\",\n    component: \"div\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, \"Para quem gostaria de transferir?\"), React.createElement(TextField, {\n    label: \"ID do personagem\",\n    value: playerId,\n    onChange: handleChangePlayerId,\n    onInput: handleOnInput,\n    autoFocus: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }), React.createElement(Typography, {\n    variant: \"subtitle2\",\n    component: \"div\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, \"Quanto voc\\xEA gostaria de transferir?\"), React.createElement(Typography, {\n    variant: \"body2\",\n    component: \"div\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, \"Voc\\xEA tem \", new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD'\n  }).format(data.account.bankMoney), \" dispon\\xEDvel\"), React.createElement(TextField, {\n    label: \"\",\n    value: amount,\n    onChange: handleChange,\n    InputProps: {\n      inputComponent: NumberFormatCustom\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    style: styles.wrapper,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }, React.createElement(SubmitButtonWithSelector, {\n    label: \"Transferir \\u279D\",\n    isDisabled: isDisabled,\n    onClick: handleTransfer,\n    fullWidth: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  })));\n};\n\nexport default TransferScreen;","map":{"version":3,"sources":["C:/Users/robson/Desktop/cidadealta/cidadealta-app/src/screens/Transfer/index.tsx"],"names":["React","useState","Typography","TextField","NumberFormat","useRecoilState","atoms","SubmitButtonWithSelector","BankService","styles","container","width","height","display","alignItems","justifyContent","flexDirection","buttonContainer","boxSizing","padding","icon","withDescription","wrapper","marginTop","NumberFormatCustom","props","inputRef","onChange","other","values","target","name","value","TransferScreen","data","setAccount","navigationAtom","amount","setAmount","account","bankMoney","toString","playerId","setPlayerId","isDisabled","parseInt","id","handleChangePlayerId","event","handleOnInput","replace","trim","handleChange","handleTransfer","prevState","isAsyncRequesting","transfer","deposit","Intl","style","currency","format","inputComponent"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\r\nimport { \r\n  Typography,\r\n  TextField\r\n} from '@material-ui/core';\r\nimport NumberFormat from 'react-number-format';\r\nimport { useRecoilState } from 'recoil';\r\nimport * as atoms from '../../navigation/atoms';\r\nimport SubmitButtonWithSelector from '../../components/SubmitButtonWithSelector';\r\nimport { BankService } from '../../services/service';\r\n\r\nconst styles = {\r\n  container: {\r\n    width: '100%',\r\n    height: '65vh',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    flexDirection: 'column'\r\n  } as React.CSSProperties,\r\n\r\n  buttonContainer: {\r\n    width: '100%',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    flexDirection: 'column',\r\n    boxSizing: 'border-box',\r\n    padding: '1vh'\r\n  } as React.CSSProperties,\r\n\r\n  icon: {\r\n    width: '3vh',\r\n    height: '3vh'\r\n  } as React.CSSProperties,\r\n\r\n  withDescription: {\r\n    display: 'flex',\r\n    alignItems: 'flex-start',\r\n    justifyContent: 'flex-start',\r\n    flexDirection: 'column'\r\n  } as React.CSSProperties,\r\n\r\n  wrapper: {\r\n    marginTop: '1vh',\r\n    width: '30vw'\r\n  } as React.CSSProperties\r\n}\r\n\r\ninterface NumberFormatCustomProps {\r\n  inputRef: (instance: NumberFormat | null) => void;\r\n  onChange: (event: { target: { name: string; value: string } }) => void;\r\n  name: string;\r\n}\r\n\r\nfunction NumberFormatCustom(props: NumberFormatCustomProps) {\r\n  const {inputRef, onChange, ...other} = props;\r\n\r\n  return (\r\n    <NumberFormat\r\n      {...other}\r\n      getInputRef={inputRef}\r\n      onValueChange={(values) => {\r\n        onChange({\r\n          target: {\r\n            name: props.name,\r\n            value: values.value,\r\n          },\r\n        });\r\n      }}\r\n      thousandSeparator\r\n      isNumericString\r\n      prefix=\"$\"\r\n    />\r\n  );\r\n}\r\n\r\nconst TransferScreen = () => {\r\n  const [data, setAccount] = useRecoilState(atoms.navigationAtom);\r\n  const [amount, setAmount] = useState(data.account.bankMoney.toString());\r\n  const [playerId, setPlayerId] = useState<string | null>(null);\r\n\r\n  const isDisabled = !(data.account.bankMoney >= parseInt(amount) &&   \r\n                     parseInt(amount) >= 1) ||\r\n                     !playerId ||\r\n                     parseInt(playerId) === data.account.id ||\r\n                     (parseInt(playerId as string) > 10000) ||\r\n                     (parseInt(playerId as string) < 1);\r\n\r\n  const handleChangePlayerId = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setPlayerId(event.target.value as string);\r\n  };\r\n\r\n  const handleOnInput = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    event.target.value = (event.target.value || ' ').replace(/\\D+/g, '').trim()\r\n  };\r\n\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setAmount(event.target.value as string);\r\n  };\r\n\r\n  const handleTransfer = () => {\r\n    const value = parseInt(amount);\r\n\r\n    setAccount(prevState => ({ \r\n      ...prevState,\r\n      account: {\r\n        ...prevState.account, \r\n        ...{\r\n          bankMoney: data.account.bankMoney - value\r\n        }\r\n      },\r\n      isAsyncRequesting: true\r\n    }));\r\n\r\n    async function transfer() {\r\n      await BankService.transfer(data.account.id, playerId, value);\r\n\r\n      setAccount(prevState => ({ \r\n        ...prevState,\r\n        isAsyncRequesting: false\r\n      }));\r\n    }\r\n\r\n    deposit();\r\n  }\r\n\r\n  return (\r\n    <div style={styles.container}>\r\n      <div style={styles.buttonContainer}>\r\n        <div style={styles.withDescription}>\r\n          <Typography \r\n            variant='subtitle2' \r\n            component='div'>\r\n            Para quem gostaria de transferir?\r\n          </Typography>\r\n\r\n          <TextField\r\n            label=\"ID do personagem\"\r\n            value={playerId}\r\n            onChange={handleChangePlayerId}\r\n            onInput={handleOnInput}\r\n            autoFocus={true}\r\n          />\r\n\r\n          <Typography \r\n            variant='subtitle2' \r\n            component='div'>\r\n            Quanto você gostaria de transferir?\r\n          </Typography>\r\n\r\n          <Typography \r\n            variant='body2' \r\n            component='div'>\r\n            Você tem {new Intl.NumberFormat('en-US', { \r\n              style: 'currency', \r\n              currency: 'USD'\r\n            }).format(data.account.bankMoney)} disponível\r\n          </Typography>\r\n\r\n          <TextField\r\n            label=\"\"\r\n            value={amount}\r\n            onChange={handleChange}\r\n            InputProps={{\r\n              inputComponent: NumberFormatCustom as any,\r\n            }}\r\n          />\r\n        </div>\r\n      </div>  \r\n\r\n      <div style={styles.wrapper}>\r\n        <SubmitButtonWithSelector\r\n          label='Transferir ➝'\r\n          isDisabled={isDisabled}\r\n          onClick={handleTransfer}\r\n          fullWidth={true} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TransferScreen;"]},"metadata":{},"sourceType":"module"}