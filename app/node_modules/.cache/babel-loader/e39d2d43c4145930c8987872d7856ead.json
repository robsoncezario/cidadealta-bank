{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport KeyboardArrowLeft from '../internal/svg-icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '../internal/svg-icons/KeyboardArrowRight';\nimport withStyles from '../styles/withStyles';\nimport ButtonBase from '../ButtonBase';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    color: 'inherit',\n    width: 56,\n    flexShrink: 0\n  }\n};\n/**\n * @ignore - internal component.\n */\n\nvar _ref = React.createElement(KeyboardArrowLeft, null);\n\nvar _ref2 = React.createElement(KeyboardArrowRight, null);\n\nvar TabScrollButton = React.forwardRef(function TabScrollButton(props, ref) {\n  var classes = props.classes,\n      classNameProp = props.className,\n      direction = props.direction,\n      onClick = props.onClick,\n      visible = props.visible,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"direction\", \"onClick\", \"visible\"]);\n\n  var className = clsx(classes.root, classNameProp);\n\n  if (!visible) {\n    return React.createElement(\"div\", {\n      className: className\n    });\n  }\n\n  return React.createElement(ButtonBase, _extends({\n    className: className,\n    onClick: onClick,\n    ref: ref,\n    tabIndex: -1\n  }, other), direction === 'left' ? _ref : _ref2);\n});\nprocess.env.NODE_ENV !== \"production\" ? TabScrollButton.propTypes = {\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * Which direction should the button indicate?\n   */\n  direction: PropTypes.oneOf(['left', 'right']),\n\n  /**\n   * Callback to execute for button press.\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * Should the button be present or just consume space.\n   */\n  visible: PropTypes.bool\n} : void 0;\nTabScrollButton.defaultProps = {\n  visible: true\n};\nexport default withStyles(styles, {\n  name: 'PrivateTabScrollButton'\n})(TabScrollButton);","map":{"version":3,"sources":["C:/Users/robson/Desktop/cidadealta/cidadealta-app/node_modules/@material-ui/core/esm/Tabs/TabScrollButton.js"],"names":["_extends","_objectWithoutProperties","React","PropTypes","clsx","KeyboardArrowLeft","KeyboardArrowRight","withStyles","ButtonBase","styles","root","color","width","flexShrink","_ref","createElement","_ref2","TabScrollButton","forwardRef","props","ref","classes","classNameProp","className","direction","onClick","visible","other","tabIndex","process","env","NODE_ENV","propTypes","object","isRequired","string","oneOf","func","bool","defaultProps","name"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,gCAArB;AACA,OAAOC,wBAAP,MAAqC,gDAArC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,iBAAP,MAA8B,yCAA9B;AACA,OAAOC,kBAAP,MAA+B,0CAA/B;AACA,OAAOC,UAAP,MAAuB,sBAAvB;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAO,IAAIC,MAAM,GAAG;AAClB;AACAC,EAAAA,IAAI,EAAE;AACJC,IAAAA,KAAK,EAAE,SADH;AAEJC,IAAAA,KAAK,EAAE,EAFH;AAGJC,IAAAA,UAAU,EAAE;AAHR;AAFY,CAAb;AAQP;;;;AAIA,IAAIC,IAAI,GAAGZ,KAAK,CAACa,aAAN,CAAoBV,iBAApB,EAAuC,IAAvC,CAAX;;AAEA,IAAIW,KAAK,GAAGd,KAAK,CAACa,aAAN,CAAoBT,kBAApB,EAAwC,IAAxC,CAAZ;;AAEA,IAAIW,eAAe,GAAGf,KAAK,CAACgB,UAAN,CAAiB,SAASD,eAAT,CAAyBE,KAAzB,EAAgCC,GAAhC,EAAqC;AAC1E,MAAIC,OAAO,GAAGF,KAAK,CAACE,OAApB;AAAA,MACIC,aAAa,GAAGH,KAAK,CAACI,SAD1B;AAAA,MAEIC,SAAS,GAAGL,KAAK,CAACK,SAFtB;AAAA,MAGIC,OAAO,GAAGN,KAAK,CAACM,OAHpB;AAAA,MAIIC,OAAO,GAAGP,KAAK,CAACO,OAJpB;AAAA,MAKIC,KAAK,GAAG1B,wBAAwB,CAACkB,KAAD,EAAQ,CAAC,SAAD,EAAY,WAAZ,EAAyB,WAAzB,EAAsC,SAAtC,EAAiD,SAAjD,CAAR,CALpC;;AAOA,MAAII,SAAS,GAAGnB,IAAI,CAACiB,OAAO,CAACX,IAAT,EAAeY,aAAf,CAApB;;AAEA,MAAI,CAACI,OAAL,EAAc;AACZ,WAAOxB,KAAK,CAACa,aAAN,CAAoB,KAApB,EAA2B;AAChCQ,MAAAA,SAAS,EAAEA;AADqB,KAA3B,CAAP;AAGD;;AAED,SAAOrB,KAAK,CAACa,aAAN,CAAoBP,UAApB,EAAgCR,QAAQ,CAAC;AAC9CuB,IAAAA,SAAS,EAAEA,SADmC;AAE9CE,IAAAA,OAAO,EAAEA,OAFqC;AAG9CL,IAAAA,GAAG,EAAEA,GAHyC;AAI9CQ,IAAAA,QAAQ,EAAE,CAAC;AAJmC,GAAD,EAK5CD,KAL4C,CAAxC,EAKIH,SAAS,KAAK,MAAd,GAAuBV,IAAvB,GAA8BE,KALlC,CAAP;AAMD,CAtBqB,CAAtB;AAuBAa,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCd,eAAe,CAACe,SAAhB,GAA4B;AAClE;;;;AAIAX,EAAAA,OAAO,EAAElB,SAAS,CAAC8B,MAAV,CAAiBC,UALwC;;AAOlE;;;AAGAX,EAAAA,SAAS,EAAEpB,SAAS,CAACgC,MAV6C;;AAYlE;;;AAGAX,EAAAA,SAAS,EAAErB,SAAS,CAACiC,KAAV,CAAgB,CAAC,MAAD,EAAS,OAAT,CAAhB,CAfuD;;AAiBlE;;;AAGAX,EAAAA,OAAO,EAAEtB,SAAS,CAACkC,IApB+C;;AAsBlE;;;AAGAX,EAAAA,OAAO,EAAEvB,SAAS,CAACmC;AAzB+C,CAApE,GA0BI,KAAK,CA1BT;AA2BArB,eAAe,CAACsB,YAAhB,GAA+B;AAC7Bb,EAAAA,OAAO,EAAE;AADoB,CAA/B;AAGA,eAAenB,UAAU,CAACE,MAAD,EAAS;AAChC+B,EAAAA,IAAI,EAAE;AAD0B,CAAT,CAAV,CAEZvB,eAFY,CAAf","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport KeyboardArrowLeft from '../internal/svg-icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '../internal/svg-icons/KeyboardArrowRight';\nimport withStyles from '../styles/withStyles';\nimport ButtonBase from '../ButtonBase';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    color: 'inherit',\n    width: 56,\n    flexShrink: 0\n  }\n};\n/**\n * @ignore - internal component.\n */\n\nvar _ref = React.createElement(KeyboardArrowLeft, null);\n\nvar _ref2 = React.createElement(KeyboardArrowRight, null);\n\nvar TabScrollButton = React.forwardRef(function TabScrollButton(props, ref) {\n  var classes = props.classes,\n      classNameProp = props.className,\n      direction = props.direction,\n      onClick = props.onClick,\n      visible = props.visible,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"direction\", \"onClick\", \"visible\"]);\n\n  var className = clsx(classes.root, classNameProp);\n\n  if (!visible) {\n    return React.createElement(\"div\", {\n      className: className\n    });\n  }\n\n  return React.createElement(ButtonBase, _extends({\n    className: className,\n    onClick: onClick,\n    ref: ref,\n    tabIndex: -1\n  }, other), direction === 'left' ? _ref : _ref2);\n});\nprocess.env.NODE_ENV !== \"production\" ? TabScrollButton.propTypes = {\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * Which direction should the button indicate?\n   */\n  direction: PropTypes.oneOf(['left', 'right']),\n\n  /**\n   * Callback to execute for button press.\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * Should the button be present or just consume space.\n   */\n  visible: PropTypes.bool\n} : void 0;\nTabScrollButton.defaultProps = {\n  visible: true\n};\nexport default withStyles(styles, {\n  name: 'PrivateTabScrollButton'\n})(TabScrollButton);"]},"metadata":{},"sourceType":"module"}