{"ast":null,"code":"import _objectWithoutProperties from '@babel/runtime/helpers/esm/objectWithoutProperties';\nimport { memo, useRef, useEffect, createElement } from 'react';\nimport { bool } from 'prop-types';\nimport { c as DAY_SIZE, d as DAY_MARGIN, u as useUtils } from './dimensions-91c32fe6.js';\nimport clsx from 'clsx';\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport { makeStyles, fade } from '@material-ui/core/styles';\nimport '@babel/runtime/helpers/esm/slicedToArray';\nimport '@babel/runtime/helpers/esm/typeof';\nimport { o as onSpaceOrEnter } from './utils-ef34bcd7.js';\nimport { F as FORCE_FINISH_PICKER } from './usePickerState-1c348703.js';\nimport ButtonBase from '@material-ui/core/ButtonBase';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    day: {\n      width: DAY_SIZE,\n      height: DAY_SIZE,\n      borderRadius: '50%',\n      padding: 0,\n      // background required here to prevent collides with the other days when animating with transition group\n      backgroundColor: theme.palette.background.paper,\n      color: theme.palette.text.primary,\n      fontSize: theme.typography.caption.fontSize,\n      fontWeight: theme.typography.fontWeightMedium,\n      '&:hover': {\n        backgroundColor: fade(theme.palette.action.active, theme.palette.action.hoverOpacity)\n      },\n      '&:focus': {\n        backgroundColor: fade(theme.palette.action.active, theme.palette.action.hoverOpacity),\n        '&$daySelected': {\n          willChange: 'background-color',\n          backgroundColor: theme.palette.primary.dark\n        }\n      }\n    },\n    dayWithMargin: {\n      margin: \"0px \".concat(DAY_MARGIN, \"px\")\n    },\n    dayOutsideMonth: {\n      color: theme.palette.text.hint\n    },\n    hiddenDaySpacingFiller: {\n      visibility: 'hidden'\n    },\n    today: {\n      '&:not($daySelected)': {\n        border: \"1px solid \".concat(theme.palette.text.hint)\n      }\n    },\n    daySelected: {\n      color: theme.palette.primary.contrastText,\n      backgroundColor: theme.palette.primary.main,\n      fontWeight: theme.typography.fontWeightMedium,\n      transition: theme.transitions.create('background-color', {\n        duration: theme.transitions.duration[\"short\"]\n      }),\n      '&:hover': {\n        willChange: 'background-color',\n        backgroundColor: theme.palette.primary.dark\n      }\n    },\n    dayDisabled: {\n      pointerEvents: 'none',\n      color: theme.palette.text.hint\n    },\n    dayLabel: {// need for overrides\n    }\n  };\n}, {\n  name: 'MuiPickersDay'\n});\n\nvar PureDay = function PureDay(_ref) {\n  var className = _ref.className,\n      day = _ref.day,\n      disabled = _ref.disabled,\n      hidden = _ref.hidden,\n      isInCurrentMonth = _ref.inCurrentMonth,\n      isToday = _ref.today,\n      selected = _ref.selected,\n      _ref$focused = _ref.focused,\n      focused = _ref$focused === void 0 ? false : _ref$focused,\n      _ref$focusable = _ref.focusable,\n      focusable = _ref$focusable === void 0 ? false : _ref$focusable,\n      isAnimating = _ref.isAnimating,\n      onDayFocus = _ref.onDayFocus,\n      onDaySelect = _ref.onDaySelect,\n      onFocus = _ref.onFocus,\n      onClick = _ref.onClick,\n      onKeyDown = _ref.onKeyDown,\n      _ref$disableMargin = _ref.disableMargin,\n      disableMargin = _ref$disableMargin === void 0 ? false : _ref$disableMargin,\n      allowKeyboardControl = _ref.allowKeyboardControl,\n      _ref$disableHighlight = _ref.disableHighlightToday,\n      disableHighlightToday = _ref$disableHighlight === void 0 ? false : _ref$disableHighlight,\n      _ref$showDaysOutsideC = _ref.showDaysOutsideCurrentMonth,\n      showDaysOutsideCurrentMonth = _ref$showDaysOutsideC === void 0 ? false : _ref$showDaysOutsideC,\n      other = _objectWithoutProperties(_ref, [\"className\", \"day\", \"disabled\", \"hidden\", \"inCurrentMonth\", \"today\", \"selected\", \"focused\", \"focusable\", \"isAnimating\", \"onDayFocus\", \"onDaySelect\", \"onFocus\", \"onClick\", \"onKeyDown\", \"disableMargin\", \"allowKeyboardControl\", \"disableHighlightToday\", \"showDaysOutsideCurrentMonth\"]);\n\n  var ref = useRef(null);\n  var utils = useUtils();\n  var classes = useStyles();\n  useEffect(function () {\n    if (focused && !disabled && !isAnimating && isInCurrentMonth && ref.current && allowKeyboardControl) {\n      ref.current.focus();\n    }\n  }, [allowKeyboardControl, disabled, focused, isAnimating, isInCurrentMonth]);\n\n  var handleFocus = function handleFocus(e) {\n    if (!focused) {\n      onDayFocus(day);\n    }\n\n    if (onFocus) {\n      onFocus(e);\n    }\n  };\n\n  var handleClick = function handleClick(e) {\n    if (!disabled) {\n      onDaySelect(day, true);\n    }\n\n    if (onClick) {\n      onClick(e);\n    }\n  };\n\n  var handleKeyDown = onSpaceOrEnter(function () {\n    if (!disabled) {\n      onDaySelect(day, FORCE_FINISH_PICKER);\n    }\n  }, onKeyDown);\n  var dayClassName = clsx(classes.day, className, selected && classes.daySelected, disabled && classes.dayDisabled, !disableMargin && classes.dayWithMargin, !disableHighlightToday && isToday && classes.today, !isInCurrentMonth && showDaysOutsideCurrentMonth && classes.dayOutsideMonth);\n\n  if (!isInCurrentMonth && !showDaysOutsideCurrentMonth) {\n    // Do not render button and not attach any listeners for empty days\n    return createElement(\"div\", {\n      \"aria-hidden\": true,\n      className: clsx(dayClassName, classes.hiddenDaySpacingFiller)\n    });\n  }\n\n  return createElement(ButtonBase, _extends({\n    ref: ref,\n    centerRipple: true,\n    \"data-mui-test\": \"day\",\n    \"aria-label\": utils.format(day, 'fullDate'),\n    tabIndex: focused || focusable ? 0 : -1,\n    className: dayClassName\n  }, other, {\n    onFocus: handleFocus,\n    onKeyDown: handleKeyDown,\n    onClick: handleClick\n  }), createElement(\"span\", {\n    className: classes.dayLabel\n  }, utils.format(day, 'dayOfMonth')));\n};\n\nvar areDayPropsEqual = function areDayPropsEqual(prevProps, nextProps) {\n  return prevProps.focused === nextProps.focused && prevProps.focusable === nextProps.focusable && prevProps.isAnimating === nextProps.isAnimating && prevProps.today === nextProps.today && prevProps.disabled === nextProps.disabled && prevProps.selected === nextProps.selected && prevProps.allowKeyboardControl === nextProps.allowKeyboardControl && prevProps.disableMargin === nextProps.disableMargin && prevProps.showDaysOutsideCurrentMonth === nextProps.showDaysOutsideCurrentMonth && prevProps.disableHighlightToday === nextProps.disableHighlightToday && prevProps.className === nextProps.className && prevProps.onDayFocus === nextProps.onDayFocus && prevProps.onDaySelect === nextProps.onDaySelect;\n};\n\nvar Day = memo(PureDay, areDayPropsEqual);\nPureDay.displayName = 'Day';\nprocess.env.NODE_ENV !== \"production\" ? PureDay.propTypes = {\n  today: bool,\n  disabled: bool,\n  selected: bool\n} : void 0;\nPureDay.defaultProps = {\n  disabled: false,\n  today: false,\n  selected: false\n};\nexport { Day, areDayPropsEqual, useStyles };","map":{"version":3,"sources":["../src/views/Calendar/Day.tsx"],"names":["useStyles","makeStyles","day","width","height","borderRadius","padding","backgroundColor","theme","color","fontSize","fontWeight","fade","willChange","dark","dayWithMargin","margin","dayOutsideMonth","hint","hiddenDaySpacingFiller","visibility","today","border","daySelected","transition","duration","dayDisabled","pointerEvents","dayLabel","name","PureDay","className","disabled","hidden","inCurrentMonth","isInCurrentMonth","isToday","selected","focused","focusable","isAnimating","onDayFocus","onDaySelect","onFocus","onClick","onKeyDown","disableMargin","allowKeyboardControl","disableHighlightToday","showDaysOutsideCurrentMonth","other","ref","React","utils","useUtils","classes","handleFocus","handleClick","handleKeyDown","onSpaceOrEnter","dayClassName","clsx","React.createElement","areDayPropsEqual","prevProps","nextProps","Day","PropTypes"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport ButtonBase, { ButtonBaseProps } from '@material-ui/core/ButtonBase';\nimport { ExtendMui } from '../../typings/helpers';\nimport { onSpaceOrEnter } from '../../_helpers/utils';\nimport { useUtils } from '../../_shared/hooks/useUtils';\nimport { MaterialUiPickersDate } from '../../typings/date';\nimport { makeStyles, fade } from '@material-ui/core/styles';\nimport { DAY_SIZE, DAY_MARGIN } from '../../constants/dimensions';\nimport { FORCE_FINISH_PICKER } from '../../_shared/hooks/usePickerState';\n\nexport const useStyles = makeStyles(\n  theme => ({\n    day: {\n      width: DAY_SIZE,\n      height: DAY_SIZE,\n      borderRadius: '50%',\n      padding: 0,\n      // background required here to prevent collides with the other days when animating with transition group\n      backgroundColor: theme.palette.background.paper,\n      color: theme.palette.text.primary,\n      fontSize: theme.typography.caption.fontSize,\n      fontWeight: theme.typography.fontWeightMedium,\n      '&:hover': {\n        backgroundColor: fade(theme.palette.action.active, theme.palette.action.hoverOpacity),\n      },\n      '&:focus': {\n        backgroundColor: fade(theme.palette.action.active, theme.palette.action.hoverOpacity),\n        '&$daySelected': {\n          willChange: 'background-color',\n          backgroundColor: theme.palette.primary.dark,\n        },\n      },\n    },\n    dayWithMargin: {\n      margin: `0px ${DAY_MARGIN}px`,\n    },\n    dayOutsideMonth: {\n      color: theme.palette.text.hint,\n    },\n    hiddenDaySpacingFiller: {\n      visibility: 'hidden',\n    },\n    today: {\n      '&:not($daySelected)': {\n        border: `1px solid ${theme.palette.text.hint}`,\n      },\n    },\n    daySelected: {\n      color: theme.palette.primary.contrastText,\n      backgroundColor: theme.palette.primary.main,\n      fontWeight: theme.typography.fontWeightMedium,\n      transition: theme.transitions.create('background-color', {\n        duration: theme.transitions.duration.short,\n      }),\n      '&:hover': {\n        willChange: 'background-color',\n        backgroundColor: theme.palette.primary.dark,\n      },\n    },\n    dayDisabled: {\n      pointerEvents: 'none',\n      color: theme.palette.text.hint,\n    },\n    dayLabel: {\n      // need for overrides\n    },\n  }),\n  { name: 'MuiPickersDay' }\n);\n\nexport interface DayProps extends ExtendMui<ButtonBaseProps> {\n  /** The date to show */\n  day: MaterialUiPickersDate;\n  /** Is focused by keyboard navigation */\n  focused?: boolean;\n  /** Can be focused by tabbing in */\n  focusable?: boolean;\n  /** Is day in current month */\n  inCurrentMonth: boolean;\n  /** Is switching month animation going on right now */\n  isAnimating?: boolean;\n  /** Is today? */\n  today?: boolean;\n  /** Disabled? */\n  disabled?: boolean;\n  /** Selected? */\n  selected?: boolean;\n  /** Is keyboard control and focus management enabled */\n  allowKeyboardControl?: boolean;\n  /** Disable margin between days, useful for displaying range of days */\n  disableMargin?: boolean;\n  /**\n   * Display disabled dates outside the current month\n   * @default false\n   */\n  showDaysOutsideCurrentMonth?: boolean;\n  /** Disable highlighting today date with a circle\n   * @default false\n   */\n  disableHighlightToday?: boolean;\n  onDayFocus: (day: MaterialUiPickersDate) => void;\n  onDaySelect: (day: MaterialUiPickersDate, isFinish: boolean | symbol) => void;\n}\n\nconst PureDay: React.FC<DayProps> = ({\n  className,\n  day,\n  disabled,\n  hidden,\n  inCurrentMonth: isInCurrentMonth,\n  today: isToday,\n  selected,\n  focused = false,\n  focusable = false,\n  isAnimating,\n  onDayFocus,\n  onDaySelect,\n  onFocus,\n  onClick,\n  onKeyDown,\n  disableMargin = false,\n  allowKeyboardControl,\n  disableHighlightToday = false,\n  showDaysOutsideCurrentMonth = false,\n  ...other\n}) => {\n  const ref = React.useRef<HTMLButtonElement>(null);\n  const utils = useUtils();\n  const classes = useStyles();\n\n  React.useEffect(() => {\n    if (\n      focused &&\n      !disabled &&\n      !isAnimating &&\n      isInCurrentMonth &&\n      ref.current &&\n      allowKeyboardControl\n    ) {\n      ref.current.focus();\n    }\n  }, [allowKeyboardControl, disabled, focused, isAnimating, isInCurrentMonth]);\n\n  const handleFocus = (e: React.FocusEvent<HTMLButtonElement>) => {\n    if (!focused) {\n      onDayFocus(day);\n    }\n\n    if (onFocus) {\n      onFocus(e);\n    }\n  };\n\n  const handleClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!disabled) {\n      onDaySelect(day, true);\n    }\n\n    if (onClick) {\n      onClick(e);\n    }\n  };\n\n  const handleKeyDown = onSpaceOrEnter(() => {\n    if (!disabled) {\n      onDaySelect(day, FORCE_FINISH_PICKER);\n    }\n  }, onKeyDown);\n\n  const dayClassName = clsx(\n    classes.day,\n    {\n      [classes.daySelected]: selected,\n      [classes.dayDisabled]: disabled,\n      [classes.dayWithMargin]: !disableMargin,\n      [classes.today]: !disableHighlightToday && isToday,\n      [classes.dayOutsideMonth]: !isInCurrentMonth && showDaysOutsideCurrentMonth,\n    },\n    className\n  );\n\n  if (!isInCurrentMonth && !showDaysOutsideCurrentMonth) {\n    // Do not render button and not attach any listeners for empty days\n    return <div aria-hidden className={clsx(dayClassName, classes.hiddenDaySpacingFiller)} />;\n  }\n\n  return (\n    <ButtonBase\n      ref={ref}\n      centerRipple\n      data-mui-test=\"day\"\n      aria-label={utils.format(day, 'fullDate')}\n      tabIndex={focused || focusable ? 0 : -1}\n      className={dayClassName}\n      {...other}\n      onFocus={handleFocus}\n      onKeyDown={handleKeyDown}\n      onClick={handleClick}\n    >\n      <span className={classes.dayLabel}>{utils.format(day, 'dayOfMonth')}</span>\n    </ButtonBase>\n  );\n};\n\nexport const areDayPropsEqual = (prevProps: DayProps, nextProps: DayProps) => {\n  return (\n    prevProps.focused === nextProps.focused &&\n    prevProps.focusable === nextProps.focusable &&\n    prevProps.isAnimating === nextProps.isAnimating &&\n    prevProps.today === nextProps.today &&\n    prevProps.disabled === nextProps.disabled &&\n    prevProps.selected === nextProps.selected &&\n    prevProps.allowKeyboardControl === nextProps.allowKeyboardControl &&\n    prevProps.disableMargin === nextProps.disableMargin &&\n    prevProps.showDaysOutsideCurrentMonth === nextProps.showDaysOutsideCurrentMonth &&\n    prevProps.disableHighlightToday === nextProps.disableHighlightToday &&\n    prevProps.className === nextProps.className &&\n    prevProps.onDayFocus === nextProps.onDayFocus &&\n    prevProps.onDaySelect === nextProps.onDaySelect\n  );\n};\n\nexport const Day = React.memo(PureDay, areDayPropsEqual);\n\nPureDay.displayName = 'Day';\n\nPureDay.propTypes = {\n  today: PropTypes.bool,\n  disabled: PropTypes.bool,\n  selected: PropTypes.bool,\n};\n\nPureDay.defaultProps = {\n  disabled: false,\n  today: false,\n  selected: false,\n};\n"]},"metadata":{},"sourceType":"module"}