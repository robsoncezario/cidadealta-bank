import _objectWithoutProperties from '@babel/runtime/helpers/esm/objectWithoutProperties';
import { createElement, memo } from 'react';
import clsx from 'clsx';
import _extends from '@babel/runtime/helpers/esm/extends';
import Typography from '@material-ui/core/Typography';
import IconButton from '@material-ui/core/IconButton';
import { createSvgIcon } from '@material-ui/core/utils';
import { makeStyles, useTheme } from '@material-ui/core/styles';

/**
 * @ignore - internal component.
 */

var CalendarIcon = createSvgIcon(createElement("path", {
  d: "M17 12h-5v5h5v-5zM16 1v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2h-1V1h-2zm3 18H5V8h14v11z"
}), 'Calendar');

/**
 * @ignore - internal component.
 */

var ArrowLeftIcon = createSvgIcon(createElement("path", {
  d: "M15.41 16.59L10.83 12l4.58-4.59L14 6l-6 6 6 6 1.41-1.41z"
}), 'ArrowLeft');

/**
 * @ignore - internal component.
 */

var ArrowRightIcon = createSvgIcon(createElement("path", {
  d: "M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z"
}), 'ArrowRight');

var useStyles = makeStyles(function (theme) {
  return {
    iconButton: {
      zIndex: 1,
      backgroundColor: theme.palette.background.paper
    },
    previousMonthButtonMargin: {
      marginRight: 24
    },
    hidden: {
      visibility: 'hidden'
    }
  };
}, {
  name: 'MuiPickersArrowSwitcher'
});

var PureArrowSwitcher = function PureArrowSwitcher(_ref) {
  var className = _ref.className,
      leftArrowButtonProps = _ref.leftArrowButtonProps,
      leftArrowButtonText = _ref.leftArrowButtonText,
      rightArrowButtonProps = _ref.rightArrowButtonProps,
      rightArrowButtonText = _ref.rightArrowButtonText,
      isLeftHidden = _ref.isLeftHidden,
      isRightHidden = _ref.isRightHidden,
      isLeftDisabled = _ref.isLeftDisabled,
      isRightDisabled = _ref.isRightDisabled,
      onLeftClick = _ref.onLeftClick,
      onRightClick = _ref.onRightClick,
      _ref$leftArrowIcon = _ref.leftArrowIcon,
      leftArrowIcon = _ref$leftArrowIcon === void 0 ? createElement(ArrowLeftIcon, null) : _ref$leftArrowIcon,
      _ref$rightArrowIcon = _ref.rightArrowIcon,
      rightArrowIcon = _ref$rightArrowIcon === void 0 ? createElement(ArrowRightIcon, null) : _ref$rightArrowIcon,
      text = _ref.text,
      other = _objectWithoutProperties(_ref, ["className", "leftArrowButtonProps", "leftArrowButtonText", "rightArrowButtonProps", "rightArrowButtonText", "isLeftHidden", "isRightHidden", "isLeftDisabled", "isRightDisabled", "onLeftClick", "onRightClick", "leftArrowIcon", "rightArrowIcon", "text"]);

  var classes = useStyles();
  var theme = useTheme();
  var isRtl = theme.direction === 'rtl';
  return createElement("div", _extends({
    className: className
  }, other), createElement(IconButton, _extends({
    "data-mui-test": "previous-arrow-button",
    size: "small",
    "aria-label": leftArrowButtonText
  }, leftArrowButtonProps, {
    disabled: isLeftDisabled,
    onClick: onLeftClick,
    className: clsx(classes.iconButton, leftArrowButtonProps === null || leftArrowButtonProps === void 0 ? void 0 : leftArrowButtonProps.className, Boolean(isLeftHidden) && classes.hidden, !Boolean(text) && classes.previousMonthButtonMargin)
  }), isRtl ? rightArrowIcon : leftArrowIcon), text && createElement(Typography, {
    variant: "subtitle1",
    display: "inline"
  }, text), createElement(IconButton, _extends({
    "data-mui-test": "next-arrow-button",
    size: "small",
    "aria-label": rightArrowButtonText
  }, rightArrowButtonProps, {
    disabled: isRightDisabled,
    onClick: onRightClick,
    className: clsx(classes.iconButton, rightArrowButtonProps === null || rightArrowButtonProps === void 0 ? void 0 : rightArrowButtonProps.className, Boolean(isRightHidden) && classes.hidden)
  }), isRtl ? leftArrowIcon : rightArrowIcon));
};

PureArrowSwitcher.displayName = 'ArrowSwitcher';
var ArrowSwitcher = memo(PureArrowSwitcher);

export { ArrowSwitcher as A, CalendarIcon as C };
//# sourceMappingURL=ArrowSwitcher-81199363.js.map
