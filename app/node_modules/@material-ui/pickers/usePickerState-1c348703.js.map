{"version":3,"file":"usePickerState-1c348703.js","sources":["../src/_shared/hooks/useOpenState.ts","../src/_shared/hooks/usePickerState.ts"],"sourcesContent":["import * as React from 'react';\nimport { BasePickerProps } from '../../typings/BasePicker';\n\nexport function useOpenState({ open, onOpen, onClose }: BasePickerProps<any, any>) {\n  const isControllingOpenProp = React.useRef(typeof open === 'boolean').current;\n  const [_open, _setIsOpen] = React.useState(false);\n\n  // It is required to update inner state in useEffect in order to avoid situation when\n  // Our component is not mounted yet, but `open` state is set to `true` (e.g. initially opened)\n  React.useEffect(() => {\n    if (isControllingOpenProp) {\n      if (typeof open !== 'boolean') {\n        throw new Error('You must not mix controlling and uncontrolled mode for `open` prop');\n      }\n\n      _setIsOpen(open);\n    }\n  }, [isControllingOpenProp, open]);\n\n  const setIsOpen = React.useCallback(\n    (newIsOpen: boolean) => {\n      if (!isControllingOpenProp) {\n        _setIsOpen(newIsOpen);\n      }\n\n      return newIsOpen ? onOpen && onOpen() : onClose && onClose();\n    },\n    [isControllingOpenProp, onOpen, onClose]\n  );\n\n  return { isOpen: _open, setIsOpen };\n}\n","import { useOpenState } from './useOpenState';\nimport { WrapperVariant } from '../../wrappers/Wrapper';\nimport { BasePickerProps } from '../../typings/BasePicker';\nimport { MaterialUiPickersDate } from '../../typings/date';\nimport { useUtils, useNow, MuiPickersAdapter } from './useUtils';\nimport { useCallback, useDebugValue, useEffect, useMemo, useState } from 'react';\n\nexport const FORCE_FINISH_PICKER = Symbol('Force closing picker, useful for accessibility');\n\nexport function usePickerState<TInput, TDateValue>(\n  props: BasePickerProps<TInput, TDateValue>,\n  valueManager: {\n    parseInput: (\n      now: MaterialUiPickersDate,\n      utils: MuiPickersAdapter,\n      props: BasePickerProps<TInput, TDateValue>\n    ) => TDateValue;\n    emptyValue: TDateValue;\n    areValuesEqual: (valueLeft: TDateValue, valueRight: TDateValue) => boolean;\n  }\n) {\n  const { autoOk, inputFormat, disabled, readOnly, onAccept, onChange, value } = props;\n\n  if (!inputFormat) {\n    throw new Error('inputFormat prop is required');\n  }\n\n  const now = useNow();\n  const utils = useUtils();\n  const date = valueManager.parseInput(now, utils, props);\n  const [pickerDate, setPickerDate] = useState(date);\n\n  // Mobile keyboard view is a special case.\n  // When it's open picker should work like closed, cause we are just showing text field\n  const [isMobileKeyboardViewOpen, setMobileKeyboardViewOpen] = useState(false);\n  const { isOpen, setIsOpen } = useOpenState(props);\n\n  useEffect(() => {\n    setPickerDate(currentPickerDate => {\n      if (!valueManager.areValuesEqual(currentPickerDate, date)) {\n        return date;\n      }\n\n      return currentPickerDate;\n    });\n    // We need to react only on value change, because `date` could potentially return new Date() on each render\n  }, [value, utils]); // eslint-disable-line\n\n  const acceptDate = useCallback(\n    (acceptedDate: TDateValue, needClosePicker: boolean) => {\n      onChange(acceptedDate);\n\n      if (needClosePicker) {\n        setIsOpen(false);\n\n        if (onAccept) {\n          onAccept(acceptedDate);\n        }\n      }\n    },\n    [onAccept, onChange, setIsOpen]\n  );\n\n  const wrapperProps = useMemo(\n    () => ({\n      open: isOpen,\n      onClear: () => acceptDate(valueManager.emptyValue, true),\n      onAccept: () => acceptDate(pickerDate, true),\n      onDismiss: () => setIsOpen(false),\n      onSetToday: () => {\n        // TODO FIX ME\n        setPickerDate(now as any);\n        acceptDate(now as any, Boolean(autoOk));\n      },\n    }),\n    [acceptDate, autoOk, isOpen, now, pickerDate, setIsOpen, valueManager.emptyValue]\n  );\n\n  const pickerProps = useMemo(\n    () => ({\n      date: pickerDate,\n      isMobileKeyboardViewOpen,\n      toggleMobileKeyboardView: () => {\n        if (!isMobileKeyboardViewOpen) {\n          // accept any partial input done by user\n          setPickerDate(pickerDate);\n        }\n\n        setMobileKeyboardViewOpen(!isMobileKeyboardViewOpen);\n      },\n      onDateChange: (\n        newDate: TDateValue,\n        currentVariant: WrapperVariant,\n        isFinish: boolean | symbol = true\n      ) => {\n        setPickerDate(newDate);\n        const isFinishing =\n          typeof isFinish === 'boolean' ? isFinish : isFinish === FORCE_FINISH_PICKER;\n\n        if (isFinishing) {\n          const autoAcceptRequested = Boolean(autoOk) || isFinish === FORCE_FINISH_PICKER;\n          if (currentVariant === 'mobile' && autoAcceptRequested) {\n            acceptDate(newDate, true);\n          }\n\n          if (currentVariant !== 'mobile') {\n            acceptDate(newDate, autoAcceptRequested);\n          }\n        }\n      },\n    }),\n    [acceptDate, autoOk, isMobileKeyboardViewOpen, pickerDate]\n  );\n\n  const inputProps = useMemo(\n    () => ({\n      onChange,\n      inputFormat,\n      open: isOpen,\n      rawValue: value,\n      openPicker: () => !readOnly && !disabled && setIsOpen(true),\n    }),\n    [onChange, inputFormat, isOpen, value, readOnly, disabled, setIsOpen]\n  );\n\n  const pickerState = { pickerProps, inputProps, wrapperProps };\n  useDebugValue(pickerState, () => ({\n    MuiPickerState: {\n      pickerDate,\n      parsedDate: date,\n      other: pickerState,\n    },\n  }));\n\n  return pickerState;\n}\n"],"names":["useOpenState","open","onOpen","onClose","isControllingOpenProp","React","current","_open","_setIsOpen","Error","setIsOpen","newIsOpen","isOpen","FORCE_FINISH_PICKER","Symbol","usePickerState","props","valueManager","autoOk","inputFormat","disabled","readOnly","onAccept","onChange","value","now","useNow","utils","useUtils","date","parseInput","useState","pickerDate","setPickerDate","isMobileKeyboardViewOpen","setMobileKeyboardViewOpen","useEffect","currentPickerDate","areValuesEqual","acceptDate","useCallback","acceptedDate","needClosePicker","wrapperProps","useMemo","onClear","emptyValue","onDismiss","onSetToday","Boolean","pickerProps","toggleMobileKeyboardView","onDateChange","newDate","currentVariant","isFinish","isFinishing","autoAcceptRequested","inputProps","rawValue","openPicker","pickerState","useDebugValue","MuiPickerState","parsedDate","other"],"mappings":"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"}