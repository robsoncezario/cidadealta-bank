import { createContext, useMemo, createElement, useContext, useRef } from 'react';
import { func, oneOfType, object, string, node } from 'prop-types';

var MuiPickersAdapterContext = createContext(null);
var LocalizationProvider = function LocalizationProvider(_ref) {
  var Utils = _ref.dateAdapter,
      children = _ref.children,
      locale = _ref.locale,
      libFormats = _ref.dateFormats,
      libInstance = _ref.dateLibInstance;
  var utils = useMemo(function () {
    return new Utils({
      locale: locale,
      formats: libFormats,
      instance: libInstance
    });
  }, [Utils, locale, libFormats, libInstance]);
  return createElement(MuiPickersAdapterContext.Provider, {
    value: utils,
    children: children
  });
};
process.env.NODE_ENV !== "production" ? LocalizationProvider.propTypes = {
  dateAdapter: func.isRequired,
  locale: oneOfType([object, string]),

  /**
   * Your component tree.
   */
  children: node.isRequired
} : void 0;

// TODO uncomment when syntax will be allowed by next babel
function checkUtils(utils)
/* : asserts utils is MuiPickersUtils */
{
  if (!utils) {
    throw new Error('Can not find utils in context. It looks like you forgot to wrap your component in LocalizationProvider, or pass dateAdapter prop directly.');
  }
}

function useUtils() {
  var utils = useContext(MuiPickersAdapterContext);
  checkUtils(utils);
  return utils;
}
function useNow() {
  var utils = useUtils();
  var now = useRef(utils.date());
  return now.current;
}

var DIALOG_WIDTH = 320;
var DIALOG_WIDTH_WIDER = 325;
var VIEW_HEIGHT = 358;
var DAY_SIZE = 36;
var DAY_MARGIN = 2;
var IS_TOUCH_DEVICE_MEDIA = '@media (pointer: fine)';

export { DIALOG_WIDTH as D, IS_TOUCH_DEVICE_MEDIA as I, LocalizationProvider as L, MuiPickersAdapterContext as M, VIEW_HEIGHT as V, useNow as a, DIALOG_WIDTH_WIDER as b, DAY_SIZE as c, DAY_MARGIN as d, useUtils as u };
//# sourceMappingURL=dimensions-91c32fe6.js.map
