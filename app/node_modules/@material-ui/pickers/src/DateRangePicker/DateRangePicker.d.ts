import * as React from 'react';
import { SomeWrapper, ExtendWrapper } from '../wrappers/Wrapper';
import { ValidationProps } from '../_shared/hooks/useValidation';
import { ExportedDateRangePickerViewProps } from './DateRangePickerView';
import { ExportedDateRangePickerInputProps } from './DateRangePickerInput';
import { DateRange as DateRangeType, RangeInput } from './RangeTypes';
import { DateRangeValidationError } from '../_helpers/date-utils';
export interface DateRangePickerProps extends ExportedDateRangePickerViewProps, ValidationProps<DateRangeValidationError, RangeInput>, ExportedDateRangePickerInputProps {
    /**
     * Text for start input label and toolbar placeholder
     * @default "Start"
     */
    startText?: React.ReactNode;
    /**
     * Text for end input label and toolbar placeholder
     * @default "end"
     */
    endText?: React.ReactNode;
}
export declare const useDateRangeValidation: (value: RangeInput, props: DateRangePickerProps) => DateRangeValidationError;
export declare function makeRangePicker<TWrapper extends SomeWrapper>(Wrapper: TWrapper): React.ForwardRefExoticComponent<React.PropsWithoutRef<DateRangePickerProps & Pick<import("../Picker/SharedPickerProps").AllSharedPickerProps<RangeInput, DateRangeType>, "value" | "dateAdapter" | "label" | "mask" | "className" | "onChange" | "disabled" | "InputProps" | "inputFormat" | "open" | "readOnly" | "ignoreInvalidInputs" | "openPickerIcon" | "acceptRegex" | "InputAdornmentProps" | "OpenPickerButtonProps" | "rifmFormatter" | "disableOpenPicker" | "disableMaskedInput" | "getOpenDialogAriaText" | "orientation" | "toolbarTitle" | "toolbarFormat" | "onClose" | "onAccept" | "autoOk" | "defaultHighlight" | "onOpen" | "showToolbar" | "ToolbarComponent"> & ExportedDateRangePickerInputProps & ExtendWrapper<TWrapper>> & React.RefAttributes<HTMLDivElement>>;
export declare type DateRange = DateRangeType;
export declare const DateRangePicker: React.ForwardRefExoticComponent<DateRangePickerProps & Pick<import("../Picker/SharedPickerProps").AllSharedPickerProps<RangeInput, DateRangeType>, "value" | "dateAdapter" | "label" | "mask" | "className" | "onChange" | "disabled" | "InputProps" | "inputFormat" | "open" | "readOnly" | "ignoreInvalidInputs" | "openPickerIcon" | "acceptRegex" | "InputAdornmentProps" | "OpenPickerButtonProps" | "rifmFormatter" | "disableOpenPicker" | "disableMaskedInput" | "getOpenDialogAriaText" | "orientation" | "toolbarTitle" | "toolbarFormat" | "onClose" | "onAccept" | "autoOk" | "defaultHighlight" | "onOpen" | "showToolbar" | "ToolbarComponent"> & ExportedDateRangePickerInputProps & Pick<import("../wrappers/ResponsiveWrapper").ResponsiveWrapperProps, "displayStaticWrapperAs" | "okLabel" | "cancelLabel" | "clearLabel" | "todayLabel" | "clearable" | "showTodayButton" | "showTabs" | "wider" | "TransitionComponent" | "DialogProps" | "PopoverProps" | "PopperProps" | "desktopModeMediaQuery"> & React.RefAttributes<HTMLDivElement>>;
export declare const DesktopDateRangePicker: React.ForwardRefExoticComponent<DateRangePickerProps & Pick<import("../Picker/SharedPickerProps").AllSharedPickerProps<RangeInput, DateRangeType>, "value" | "dateAdapter" | "label" | "mask" | "className" | "onChange" | "disabled" | "InputProps" | "inputFormat" | "open" | "readOnly" | "ignoreInvalidInputs" | "openPickerIcon" | "acceptRegex" | "InputAdornmentProps" | "OpenPickerButtonProps" | "rifmFormatter" | "disableOpenPicker" | "disableMaskedInput" | "getOpenDialogAriaText" | "orientation" | "toolbarTitle" | "toolbarFormat" | "onClose" | "onAccept" | "autoOk" | "defaultHighlight" | "onOpen" | "showToolbar" | "ToolbarComponent"> & ExportedDateRangePickerInputProps & Pick<import("../wrappers/ResponsiveWrapper").ResponsiveWrapperProps, "displayStaticWrapperAs" | "okLabel" | "cancelLabel" | "clearLabel" | "todayLabel" | "clearable" | "showTodayButton" | "showTabs" | "wider" | "TransitionComponent" | "DialogProps" | "PopoverProps" | "PopperProps" | "desktopModeMediaQuery"> & React.RefAttributes<HTMLDivElement>>;
export declare const MobileDateRangePicker: React.ForwardRefExoticComponent<DateRangePickerProps & Pick<import("../Picker/SharedPickerProps").AllSharedPickerProps<RangeInput, DateRangeType>, "value" | "dateAdapter" | "label" | "mask" | "className" | "onChange" | "disabled" | "InputProps" | "inputFormat" | "open" | "readOnly" | "ignoreInvalidInputs" | "openPickerIcon" | "acceptRegex" | "InputAdornmentProps" | "OpenPickerButtonProps" | "rifmFormatter" | "disableOpenPicker" | "disableMaskedInput" | "getOpenDialogAriaText" | "orientation" | "toolbarTitle" | "toolbarFormat" | "onClose" | "onAccept" | "autoOk" | "defaultHighlight" | "onOpen" | "showToolbar" | "ToolbarComponent"> & ExportedDateRangePickerInputProps & Pick<import("../wrappers/ResponsiveWrapper").ResponsiveWrapperProps, "displayStaticWrapperAs" | "okLabel" | "cancelLabel" | "clearLabel" | "todayLabel" | "clearable" | "showTodayButton" | "showTabs" | "wider" | "TransitionComponent" | "DialogProps" | "PopoverProps" | "PopperProps" | "desktopModeMediaQuery"> & React.RefAttributes<HTMLDivElement>>;
export declare const StaticDateRangePicker: React.ForwardRefExoticComponent<DateRangePickerProps & Pick<import("../Picker/SharedPickerProps").AllSharedPickerProps<RangeInput, DateRangeType>, "value" | "dateAdapter" | "label" | "mask" | "className" | "onChange" | "disabled" | "InputProps" | "inputFormat" | "open" | "readOnly" | "ignoreInvalidInputs" | "openPickerIcon" | "acceptRegex" | "InputAdornmentProps" | "OpenPickerButtonProps" | "rifmFormatter" | "disableOpenPicker" | "disableMaskedInput" | "getOpenDialogAriaText" | "orientation" | "toolbarTitle" | "toolbarFormat" | "onClose" | "onAccept" | "autoOk" | "defaultHighlight" | "onOpen" | "showToolbar" | "ToolbarComponent"> & ExportedDateRangePickerInputProps & import("../wrappers/StaticWrapper").StaticWrapperProps & React.RefAttributes<HTMLDivElement>>;
export { DateRangeDelimiter } from './DateRangeDelimiter';
