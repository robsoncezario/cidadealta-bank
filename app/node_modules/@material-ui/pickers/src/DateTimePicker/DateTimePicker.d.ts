import { ExportedClockViewProps } from '../views/Clock/ClockView';
import { ExportedCalendarViewProps } from '../views/Calendar/CalendarView';
import { WithViewsProps } from '../Picker/SharedPickerProps';
import { DateAndTimeValidationError } from './date-time-utils';
import { ValidationProps } from '../_shared/hooks/useValidation';
import { ParsableDate } from '../constants/prop-types';
export declare type DateTimePickerView = 'year' | 'date' | 'month' | 'hours' | 'minutes' | 'seconds';
export interface DateTimePickerProps extends WithViewsProps<'year' | 'date' | 'month' | 'hours' | 'minutes'>, ValidationProps<DateAndTimeValidationError, ParsableDate>, ExportedClockViewProps, ExportedCalendarViewProps {
    /** To show tabs */
    hideTabs?: boolean;
    /** Date tab icon */
    dateRangeIcon?: React.ReactNode;
    /** Time tab icon */
    timeIcon?: React.ReactNode;
    /** Minimal selectable moment of time with binding to date, to set min time in each day use `minTime` */
    minDateTime?: ParsableDate;
    /** Minimal selectable moment of time with binding to date, to set max time in each day use `maxTime` */
    maxDateTime?: ParsableDate;
    /** Date format, that is displaying in toolbar */
    toolbarFormat?: string;
}
export declare const DateTimePicker: import("react").ForwardRefExoticComponent<DateTimePickerProps & import("../typings/BasePicker").BasePickerProps<ParsableDate, import("../typings/date").MaterialUiPickersDate> & Pick<import("../_shared/PureDateInput").DateInputProps<ParsableDate, import("../typings/date").MaterialUiPickersDate>, "label" | "mask" | "disabled" | "InputProps" | "readOnly" | "ignoreInvalidInputs" | "renderInput" | "openPickerIcon" | "acceptRegex" | "InputAdornmentProps" | "OpenPickerButtonProps" | "rifmFormatter" | "disableOpenPicker" | "disableMaskedInput" | "getOpenDialogAriaText"> & import("../_shared/withDateAdapterProp").WithDateAdapterProps & Pick<import("../wrappers/ResponsiveWrapper").ResponsiveWrapperProps, "displayStaticWrapperAs" | "okLabel" | "cancelLabel" | "clearLabel" | "todayLabel" | "clearable" | "showTodayButton" | "showTabs" | "wider" | "TransitionComponent" | "DialogProps" | "PopoverProps" | "PopperProps" | "desktopModeMediaQuery"> & {
    children?: import("react").ReactNode;
} & import("react").RefAttributes<HTMLInputElement>>;
export declare const DesktopDateTimePicker: import("react").ForwardRefExoticComponent<DateTimePickerProps & import("../typings/BasePicker").BasePickerProps<ParsableDate, import("../typings/date").MaterialUiPickersDate> & Pick<import("../_shared/PureDateInput").DateInputProps<ParsableDate, import("../typings/date").MaterialUiPickersDate>, "label" | "mask" | "disabled" | "InputProps" | "readOnly" | "ignoreInvalidInputs" | "renderInput" | "openPickerIcon" | "acceptRegex" | "InputAdornmentProps" | "OpenPickerButtonProps" | "rifmFormatter" | "disableOpenPicker" | "disableMaskedInput" | "getOpenDialogAriaText"> & import("../_shared/withDateAdapterProp").WithDateAdapterProps & Pick<import("../wrappers/ResponsiveWrapper").ResponsiveWrapperProps, "displayStaticWrapperAs" | "okLabel" | "cancelLabel" | "clearLabel" | "todayLabel" | "clearable" | "showTodayButton" | "showTabs" | "wider" | "TransitionComponent" | "DialogProps" | "PopoverProps" | "PopperProps" | "desktopModeMediaQuery"> & {
    children?: import("react").ReactNode;
} & import("react").RefAttributes<HTMLInputElement>>;
export declare const MobileDateTimePicker: import("react").ForwardRefExoticComponent<DateTimePickerProps & import("../typings/BasePicker").BasePickerProps<ParsableDate, import("../typings/date").MaterialUiPickersDate> & Pick<import("../_shared/PureDateInput").DateInputProps<ParsableDate, import("../typings/date").MaterialUiPickersDate>, "label" | "mask" | "disabled" | "InputProps" | "readOnly" | "ignoreInvalidInputs" | "renderInput" | "openPickerIcon" | "acceptRegex" | "InputAdornmentProps" | "OpenPickerButtonProps" | "rifmFormatter" | "disableOpenPicker" | "disableMaskedInput" | "getOpenDialogAriaText"> & import("../_shared/withDateAdapterProp").WithDateAdapterProps & Pick<import("../wrappers/ResponsiveWrapper").ResponsiveWrapperProps, "displayStaticWrapperAs" | "okLabel" | "cancelLabel" | "clearLabel" | "todayLabel" | "clearable" | "showTodayButton" | "showTabs" | "wider" | "TransitionComponent" | "DialogProps" | "PopoverProps" | "PopperProps" | "desktopModeMediaQuery"> & {
    children?: import("react").ReactNode;
} & import("react").RefAttributes<HTMLInputElement>>;
export declare const StaticDateTimePicker: import("react").ForwardRefExoticComponent<DateTimePickerProps & import("../typings/BasePicker").BasePickerProps<ParsableDate, import("../typings/date").MaterialUiPickersDate> & Pick<import("../_shared/PureDateInput").DateInputProps<ParsableDate, import("../typings/date").MaterialUiPickersDate>, "label" | "mask" | "disabled" | "InputProps" | "readOnly" | "ignoreInvalidInputs" | "renderInput" | "openPickerIcon" | "acceptRegex" | "InputAdornmentProps" | "OpenPickerButtonProps" | "rifmFormatter" | "disableOpenPicker" | "disableMaskedInput" | "getOpenDialogAriaText"> & import("../_shared/withDateAdapterProp").WithDateAdapterProps & Pick<import("../wrappers/ResponsiveWrapper").ResponsiveWrapperProps, "displayStaticWrapperAs" | "okLabel" | "cancelLabel" | "clearLabel" | "todayLabel" | "clearable" | "showTodayButton" | "showTabs" | "wider" | "TransitionComponent" | "DialogProps" | "PopoverProps" | "PopperProps" | "desktopModeMediaQuery"> & {
    children?: import("react").ReactNode;
} & import("react").RefAttributes<HTMLInputElement>>;
