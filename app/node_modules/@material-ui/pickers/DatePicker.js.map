{"version":3,"file":"DatePicker.js","sources":["../src/DatePicker/DatePickerToolbar.tsx","../src/DatePicker/DatePicker.tsx"],"sourcesContent":["import * as React from 'react';\nimport clsx from 'clsx';\nimport PickerToolbar from '../_shared/PickerToolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { DatePickerView } from './DatePicker';\nimport { useUtils } from '../_shared/hooks/useUtils';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { ToolbarComponentProps } from '../Picker/Picker';\nimport { isYearAndMonthViews, isYearOnlyView } from '../_helpers/date-utils';\n\nexport const useStyles = makeStyles(\n  {\n    dateTitleLandscape: {\n      margin: 'auto 16px auto auto',\n    },\n    penIcon: {\n      position: 'relative',\n      top: 4,\n    },\n  },\n  { name: 'MuiPickersDatePickerRoot' }\n);\n\nexport const DatePickerToolbar: React.FC<ToolbarComponentProps> = ({\n  date,\n  views,\n  isLandscape,\n  isMobileKeyboardViewOpen,\n  toggleMobileKeyboardView,\n  toolbarFormat,\n  toolbarTitle = 'SELECT DATE',\n}) => {\n  const utils = useUtils();\n  const classes = useStyles();\n\n  const dateText = React.useMemo(() => {\n    if (toolbarFormat) {\n      return utils.formatByString(date, toolbarFormat);\n    }\n\n    if (isYearOnlyView(views as DatePickerView[])) {\n      return utils.format(date, 'year');\n    }\n\n    if (isYearAndMonthViews(views as DatePickerView[])) {\n      return utils.format(date, 'month');\n    }\n\n    // Little localization hack (Google is doing the same for android native pickers):\n    // For english localization it is convenient to include weekday into the date \"Mon, Jun 1\"\n    // For other locales using strings like \"June 1\", without weekday\n    return /en/.test(utils.getCurrentLocaleCode())\n      ? utils.format(date, 'normalDateWithWeekday')\n      : utils.format(date, 'normalDate');\n  }, [date, toolbarFormat, utils, views]);\n\n  return (\n    <PickerToolbar\n      toolbarTitle={toolbarTitle}\n      isMobileKeyboardViewOpen={isMobileKeyboardViewOpen}\n      toggleMobileKeyboardView={toggleMobileKeyboardView}\n      isLandscape={isLandscape}\n      penIconClassName={classes.penIcon}\n    >\n      <Typography\n        variant=\"h4\"\n        children={dateText}\n        data-mui-test=\"datepicker-toolbar-date\"\n        align={isLandscape ? 'left' : 'center'}\n        className={clsx({ [classes.dateTitleLandscape]: isLandscape })}\n      />\n    </PickerToolbar>\n  );\n};\n","import { useUtils } from '../_shared/hooks/useUtils';\nimport { DatePickerToolbar } from './DatePickerToolbar';\nimport { WithViewsProps } from '../Picker/SharedPickerProps';\nimport { ResponsiveWrapper } from '../wrappers/ResponsiveWrapper';\nimport { useParsedDate } from '../_shared/hooks/date-helpers-hooks';\nimport { ExportedCalendarViewProps } from '../views/Calendar/CalendarView';\nimport { ModalWrapper, InlineWrapper, StaticWrapper } from '../wrappers/Wrapper';\nimport { makeValidationHook, ValidationProps } from '../_shared/hooks/useValidation';\nimport { ParsableDate, defaultMinDate, defaultMaxDate } from '../constants/prop-types';\nimport { getFormatByViews, validateDate, DateValidationError } from '../_helpers/date-utils';\nimport { makePickerWithStateAndWrapper, AllPickerProps } from '../Picker/makePickerWithState';\n\nexport type DatePickerView = 'year' | 'date' | 'month';\n\nexport interface BaseDatePickerProps\n  extends WithViewsProps<'year' | 'date' | 'month'>,\n    ValidationProps<DateValidationError, ParsableDate>,\n    ExportedCalendarViewProps {}\n\nconst datePickerConfig = {\n  useValidation: makeValidationHook<DateValidationError, ParsableDate, BaseDatePickerProps>(\n    validateDate\n  ),\n  DefaultToolbarComponent: DatePickerToolbar,\n  useInterceptProps: ({\n    openTo = 'date',\n    views = ['year', 'date'],\n    minDate: __minDate = defaultMinDate,\n    maxDate: __maxDate = defaultMaxDate,\n    ...other\n  }: AllPickerProps<BaseDatePickerProps>) => {\n    const utils = useUtils();\n    const minDate = useParsedDate(__minDate);\n    const maxDate = useParsedDate(__maxDate);\n\n    return {\n      views,\n      openTo,\n      minDate,\n      maxDate,\n      mask: '__/__/____',\n      inputFormat: getFormatByViews(views, utils),\n      ...other,\n    };\n  },\n};\n\nexport const DatePicker = makePickerWithStateAndWrapper<BaseDatePickerProps>(\n  ResponsiveWrapper,\n  datePickerConfig\n);\n\nexport type DatePickerProps = React.ComponentProps<typeof DatePicker>;\n\nexport const MobileDatePicker = makePickerWithStateAndWrapper<BaseDatePickerProps>(\n  ModalWrapper,\n  datePickerConfig\n);\n\nexport type MobileDatePickerProps = React.ComponentProps<typeof MobileDatePicker>;\n\nexport const DesktopDatePicker = makePickerWithStateAndWrapper<BaseDatePickerProps>(\n  InlineWrapper,\n  datePickerConfig\n);\n\nexport type DesktopDatePickerProps = React.ComponentProps<typeof DesktopDatePicker>;\n\nexport const StaticDatePicker = makePickerWithStateAndWrapper<BaseDatePickerProps>(\n  StaticWrapper,\n  datePickerConfig\n);\n\nexport type StaticDatePickerProps = React.ComponentProps<typeof StaticDatePicker>;\n"],"names":["useStyles","makeStyles","dateTitleLandscape","margin","penIcon","position","top","name","DatePickerToolbar","date","views","isLandscape","isMobileKeyboardViewOpen","toggleMobileKeyboardView","toolbarFormat","toolbarTitle","utils","useUtils","classes","dateText","React","formatByString","isYearOnlyView","format","isYearAndMonthViews","test","getCurrentLocaleCode","React.createElement","clsx","datePickerConfig","useValidation","makeValidationHook","validateDate","DefaultToolbarComponent","useInterceptProps","openTo","minDate","__minDate","defaultMinDate","maxDate","__maxDate","defaultMaxDate","other","useParsedDate","mask","inputFormat","getFormatByViews","DatePicker","makePickerWithStateAndWrapper","ResponsiveWrapper","MobileDatePicker","ModalWrapper","DesktopDatePicker","InlineWrapper","StaticDatePicker","StaticWrapper"],"mappings":"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"}