import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';
import _objectWithoutProperties from '@babel/runtime/helpers/esm/objectWithoutProperties';
import { createElement, Fragment } from 'react';
import 'prop-types';
import { u as useUtils } from './dimensions-91c32fe6.js';
import 'clsx';
import '@babel/runtime/helpers/esm/extends';
import '@material-ui/core/Grid';
import '@material-ui/core/Typography';
import '@material-ui/core/IconButton';
import '@material-ui/core/Toolbar';
import { createSvgIcon } from '@material-ui/core/utils';
import { P as PickerToolbar, b as ToolbarButton, c as ToolbarText } from './ClockView-1da258a1.js';
import './ArrowSwitcher-81199363.js';
import { makeStyles, useTheme } from '@material-ui/core/styles';
import '@babel/runtime/helpers/esm/slicedToArray';
import '@babel/runtime/helpers/esm/typeof';
import './utils-ef34bcd7.js';
import { v as validateDate, b as useParsedDate, j as pick12hOr24hFormat, c as defaultMinDate, d as defaultMaxDate } from './Picker-019ee379.js';
import '@material-ui/core/useMediaQuery';
import '@material-ui/core/Button';
import '@material-ui/core/DialogActions';
import '@material-ui/core/DialogContent';
import '@material-ui/core/Dialog';
import { m as makeValidationHook, a as makePickerWithStateAndWrapper, R as ResponsiveWrapper, D as DesktopWrapper, M as MobileWrapper, S as StaticWrapper } from './makePickerWithState-00818f63.js';
import './WrapperVariantContext-a0f5915b.js';
import '@material-ui/core/InputAdornment';
import 'rifm';
import '@material-ui/core/Popover';
import '@material-ui/core/Grow';
import Paper from '@material-ui/core/Paper';
import '@material-ui/core/Modal/TrapFocus';
import '@material-ui/core/Popper';
import './useKeyDown-9f8b37a0.js';
import './usePickerState-1c348703.js';
import '@babel/runtime/helpers/esm/classCallCheck';
import '@babel/runtime/helpers/esm/createClass';
import '@babel/runtime/helpers/esm/possibleConstructorReturn';
import '@babel/runtime/helpers/esm/getPrototypeOf';
import '@babel/runtime/helpers/esm/inherits';
import { v as validateTime } from './Clock-72e0463b.js';
import '@material-ui/core/ButtonBase';
import '@material-ui/core/CircularProgress';
import 'react-transition-group';
import './Day.js';
import './Calendar.js';
import '@material-ui/core/Fade';
import Tab from '@material-ui/core/Tab';
import Tabs from '@material-ui/core/Tabs';

/**
 * @ignore - internal component.
 */

var TimeIcon = createSvgIcon(createElement(Fragment, null, createElement("path", {
  d: "M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
}), createElement("path", {
  d: "M12.5 7H11v6l5.25 3.15.75-1.23-4.5-2.67z"
})), 'Time');

/**
 * @ignore - internal component.
 */

var DateRangeIcon = createSvgIcon(createElement("path", {
  d: "M9 11H7v2h2v-2zm4 0h-2v2h2v-2zm4 0h-2v2h2v-2zm2-7h-1V2h-2v2H8V2H6v2H5c-1.11 0-1.99.9-1.99 2L3 20c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 16H5V9h14v11z"
}), 'DateRange');

var viewToTabIndex = function viewToTabIndex(openView) {
  if (openView === 'date' || openView === 'year') {
    return 'date';
  }

  return 'time';
};

var tabIndexToView = function tabIndexToView(tab) {
  if (tab === 'date') {
    return 'date';
  }

  return 'hours';
};

var useStyles = makeStyles(function (theme) {
  // prettier-ignore
  var tabsBackground = theme.palette.type === 'light' ? theme.palette.primary.main : theme.palette.background["default"];
  return {
    tabs: {
      color: theme.palette.getContrastText(tabsBackground),
      backgroundColor: tabsBackground
    }
  };
}, {
  name: 'MuiPickerDTTabs'
});
var DateTimePickerTabs = function DateTimePickerTabs(_ref) {
  var view = _ref.view,
      onChange = _ref.onChange,
      dateRangeIcon = _ref.dateRangeIcon,
      timeIcon = _ref.timeIcon;
  var classes = useStyles();
  var theme = useTheme();
  var indicatorColor = theme.palette.type === 'light' ? 'secondary' : 'primary';

  var handleChange = function handleChange(e, value) {
    if (value !== viewToTabIndex(view)) {
      onChange(tabIndexToView(value));
    }
  };

  return createElement(Paper, null, createElement(Tabs, {
    variant: "fullWidth",
    value: viewToTabIndex(view),
    onChange: handleChange,
    className: classes.tabs,
    indicatorColor: indicatorColor
  }, createElement(Tab, {
    value: "date",
    "aria-label": "pick date",
    icon: createElement(Fragment, null, dateRangeIcon)
  }), createElement(Tab, {
    value: "time",
    "aria-label": "pick time",
    icon: createElement(Fragment, null, timeIcon)
  })));
};
DateTimePickerTabs.defaultProps = {
  dateRangeIcon: createElement(DateRangeIcon, null),
  timeIcon: createElement(TimeIcon, null)
};

var useStyles$1 = makeStyles(function (_) {
  return {
    toolbar: {
      paddingLeft: 16,
      paddingRight: 16,
      justifyContent: 'space-around'
    },
    separator: {
      margin: '0 4px 0 2px',
      cursor: 'default'
    },
    timeContainer: {
      display: 'flex'
    },
    dateContainer: {
      display: 'flex',
      flexDirection: 'column',
      alignItems: 'flex-start'
    },
    timeTypography: {},
    penIcon: {
      position: 'absolute',
      top: 8,
      right: 8
    }
  };
}, {
  name: 'MuiPickerDTToolbar'
});
var DateTimePickerToolbar = function DateTimePickerToolbar(_ref) {
  var date = _ref.date,
      openView = _ref.openView,
      setOpenView = _ref.setOpenView,
      ampm = _ref.ampm,
      hideTabs = _ref.hideTabs,
      dateRangeIcon = _ref.dateRangeIcon,
      timeIcon = _ref.timeIcon,
      toolbarFormat = _ref.toolbarFormat,
      isMobileKeyboardViewOpen = _ref.isMobileKeyboardViewOpen,
      toggleMobileKeyboardView = _ref.toggleMobileKeyboardView,
      _ref$toolbarTitle = _ref.toolbarTitle,
      toolbarTitle = _ref$toolbarTitle === void 0 ? 'SELECT DATE & TIME' : _ref$toolbarTitle;
  var utils = useUtils();
  var classes = useStyles$1();
  var showTabs = !hideTabs && typeof window !== 'undefined' && window.innerHeight > 667;
  return createElement(Fragment, null, createElement(PickerToolbar, {
    toolbarTitle: toolbarTitle,
    isLandscape: false,
    penIconClassName: classes.penIcon,
    className: classes.toolbar,
    isMobileKeyboardViewOpen: isMobileKeyboardViewOpen,
    toggleMobileKeyboardView: toggleMobileKeyboardView
  }, createElement("div", {
    className: classes.dateContainer
  }, createElement(ToolbarButton, {
    tabIndex: -1,
    variant: "subtitle1",
    onClick: function onClick() {
      return setOpenView('year');
    },
    selected: openView === 'year',
    value: utils.format(date, 'year')
  }), createElement(ToolbarButton, {
    tabIndex: -1,
    variant: "h4",
    "data-mui-test": "datetimepicker-toolbar-date",
    onClick: function onClick() {
      return setOpenView('date');
    },
    selected: openView === 'date',
    value: toolbarFormat ? utils.formatByString(date, toolbarFormat) : utils.format(date, 'shortDate')
  })), createElement("div", {
    className: classes.timeContainer
  }, createElement(ToolbarButton, {
    tabIndex: -1,
    variant: "h3",
    onClick: function onClick() {
      return setOpenView('hours');
    },
    selected: openView === 'hours',
    value: ampm ? utils.format(date, 'hours12h') : utils.format(date, 'hours24h'),
    typographyClassName: classes.timeTypography
  }), createElement(ToolbarText, {
    variant: "h3",
    value: ":",
    className: classes.separator
  }), createElement(ToolbarButton, {
    tabIndex: -1,
    variant: "h3",
    onClick: function onClick() {
      return setOpenView('minutes');
    },
    selected: openView === 'minutes',
    value: utils.format(date, 'minutes'),
    typographyClassName: classes.timeTypography
  }))), showTabs && createElement(DateTimePickerTabs, {
    dateRangeIcon: dateRangeIcon,
    timeIcon: timeIcon,
    view: openView,
    onChange: setOpenView
  }));
};

function validateDateAndTime(utils, value, _ref) {
  var minDate = _ref.minDate,
      maxDate = _ref.maxDate,
      disableFuture = _ref.disableFuture,
      shouldDisableDate = _ref.shouldDisableDate,
      disablePast = _ref.disablePast,
      timeValidationProps = _objectWithoutProperties(_ref, ["minDate", "maxDate", "disableFuture", "shouldDisableDate", "disablePast"]);

  var dateValidationResult = validateDate(utils, value, {
    minDate: minDate,
    maxDate: maxDate,
    disableFuture: disableFuture,
    shouldDisableDate: shouldDisableDate,
    disablePast: disablePast
  });

  if (dateValidationResult !== null) {
    return dateValidationResult;
  }

  return validateTime(utils, value, timeValidationProps);
}

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function useInterceptProps(_ref) {
  var ampm = _ref.ampm,
      mask = _ref.mask,
      inputFormat = _ref.inputFormat,
      _ref$orientation = _ref.orientation,
      orientation = _ref$orientation === void 0 ? 'portrait' : _ref$orientation,
      __minTime = _ref.minTime,
      __maxTime = _ref.maxTime,
      _ref$minDate = _ref.minDate,
      __minDate = _ref$minDate === void 0 ? defaultMinDate : _ref$minDate,
      _ref$maxDate = _ref.maxDate,
      __maxDate = _ref$maxDate === void 0 ? defaultMaxDate : _ref$maxDate,
      __maxDateTime = _ref.maxDateTime,
      __minDateTime = _ref.minDateTime,
      _ref$openTo = _ref.openTo,
      openTo = _ref$openTo === void 0 ? 'date' : _ref$openTo,
      _ref$views = _ref.views,
      views = _ref$views === void 0 ? ['year', 'date', 'hours', 'minutes'] : _ref$views,
      other = _objectWithoutProperties(_ref, ["ampm", "mask", "inputFormat", "orientation", "minTime", "maxTime", "minDate", "maxDate", "maxDateTime", "minDateTime", "openTo", "views"]);

  var utils = useUtils();
  var minTime = useParsedDate(__minTime);
  var maxTime = useParsedDate(__maxTime);
  var minDate = useParsedDate(__minDate);
  var maxDate = useParsedDate(__maxDate);
  var minDateTime = useParsedDate(__minDateTime);
  var maxDateTime = useParsedDate(__maxDateTime);
  var willUseAmPm = ampm !== null && ampm !== void 0 ? ampm : utils.is12HourCycleInCurrentLocale();

  if (orientation !== 'portrait') {
    throw new Error('We are not supporting custom orientation for DateTimePicker yet :(');
  }

  return _objectSpread({
    openTo: openTo,
    views: views,
    ampm: willUseAmPm,
    ampmInClock: true,
    orientation: orientation,
    showToolbar: true,
    showTabs: true,
    minDate: minDateTime || minDate,
    minTime: minDateTime || minTime,
    maxDate: maxDateTime || maxDate,
    maxTime: maxDateTime || maxTime,
    disableTimeValidationIgnoreDatePart: Boolean(minDateTime || maxDateTime),
    acceptRegex: willUseAmPm ? /[\dap]/gi : /\d/gi,
    mask: mask || willUseAmPm ? '__/__/____ __:__ _M' : '__/__/____ __:__',
    inputFormat: pick12hOr24hFormat(inputFormat, ampm, {
      localized: utils.formats.keyboardDateTime,
      '12h': utils.formats.keyboardDateTime12h,
      '24h': utils.formats.keyboardDateTime24h
    })
  }, other);
}

var useValidation = makeValidationHook(validateDateAndTime);
var dateTimePickerConfig = {
  useInterceptProps: useInterceptProps,
  useValidation: useValidation,
  DefaultToolbarComponent: DateTimePickerToolbar
};
var DateTimePicker = makePickerWithStateAndWrapper(ResponsiveWrapper, dateTimePickerConfig);
var DesktopDateTimePicker = makePickerWithStateAndWrapper(DesktopWrapper, dateTimePickerConfig);
var MobileDateTimePicker = makePickerWithStateAndWrapper(MobileWrapper, dateTimePickerConfig);
var StaticDateTimePicker = makePickerWithStateAndWrapper(StaticWrapper, dateTimePickerConfig);

export { DateTimePicker, DesktopDateTimePicker, MobileDateTimePicker, StaticDateTimePicker };
//# sourceMappingURL=DateTimePicker.js.map
