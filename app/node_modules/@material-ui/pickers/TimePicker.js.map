{"version":3,"file":"TimePicker.js","sources":["../src/_shared/icons/ClockIcon.tsx","../src/TimePicker/TimePicker.tsx"],"sourcesContent":["import * as React from 'react';\nimport { createSvgIcon } from '@material-ui/core/utils';\n\n/**\n * @ignore - internal component.\n */\nexport default createSvgIcon(\n  <React.Fragment>\n    <path d=\"M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\" />\n    <path d=\"M12.5 7H11v6l5.25 3.15.75-1.23-4.5-2.67z\" />\n  </React.Fragment>,\n  'Clock'\n);\n","import React from 'react';\nimport ClockIcon from '../_shared/icons/ClockIcon';\nimport { ParsableDate } from '../constants/prop-types';\nimport { TimePickerToolbar } from './TimePickerToolbar';\nimport { ExportedClockViewProps } from '../views/Clock/ClockView';\nimport { ResponsiveWrapper } from '../wrappers/ResponsiveWrapper';\nimport { pick12hOr24hFormat } from '../_helpers/text-field-helper';\nimport { useParsedDate } from '../_shared/hooks/date-helpers-hooks';\nimport { useUtils, MuiPickersAdapter } from '../_shared/hooks/useUtils';\nimport { validateTime, TimeValidationError } from '../_helpers/time-utils';\nimport { makePickerWithStateAndWrapper } from '../Picker/makePickerWithState';\nimport { ModalWrapper, InlineWrapper, StaticWrapper } from '../wrappers/Wrapper';\nimport { WithViewsProps, AllSharedPickerProps } from '../Picker/SharedPickerProps';\nimport { ValidationProps, makeValidationHook } from '../_shared/hooks/useValidation';\n\nexport interface TimePickerProps\n  extends ExportedClockViewProps,\n    ValidationProps<TimeValidationError, ParsableDate>,\n    WithViewsProps<'hours' | 'minutes' | 'seconds'> {}\n\nexport function getTextFieldAriaText(value: ParsableDate, utils: MuiPickersAdapter) {\n  return value && utils.isValid(utils.date(value))\n    ? `Choose time, selected time is ${utils.format(utils.date(value), 'fullTime')}`\n    : 'Choose time';\n}\n\nfunction useInterceptProps({\n  ampm,\n  mask,\n  inputFormat,\n  minTime: __minTime,\n  maxTime: __maxTime,\n  openTo = 'hours',\n  views = ['hours', 'minutes'],\n  ...other\n}: TimePickerProps & AllSharedPickerProps) {\n  const utils = useUtils();\n\n  const minTime = useParsedDate(__minTime);\n  const maxTime = useParsedDate(__maxTime);\n  const willUseAmPm = ampm ?? utils.is12HourCycleInCurrentLocale();\n\n  return {\n    views,\n    openTo,\n    minTime,\n    maxTime,\n    ampm: willUseAmPm,\n    acceptRegex: willUseAmPm ? /[\\dapAP]/gi : /\\d/gi,\n    mask: mask || willUseAmPm ? '__:__ _M' : '__:__',\n    getOpenDialogAriaText: getTextFieldAriaText,\n    openPickerIcon: <ClockIcon />,\n    inputFormat: pick12hOr24hFormat(inputFormat, ampm, {\n      localized: utils.formats.fullTime,\n      '12h': utils.formats.fullTime12h,\n      '24h': utils.formats.fullTime24h,\n    }),\n    ...other,\n  };\n}\n\nconst timePickerConfig = {\n  useInterceptProps,\n  useValidation: makeValidationHook<TimeValidationError, ParsableDate, TimePickerProps>(\n    validateTime\n  ),\n  DefaultToolbarComponent: TimePickerToolbar,\n};\n\nexport const TimePicker = makePickerWithStateAndWrapper<TimePickerProps>(\n  ResponsiveWrapper,\n  timePickerConfig\n);\n\nexport const DesktopTimePicker = makePickerWithStateAndWrapper<TimePickerProps>(\n  InlineWrapper,\n  timePickerConfig\n);\n\nexport const MobileTimePicker = makePickerWithStateAndWrapper<TimePickerProps>(\n  ModalWrapper,\n  timePickerConfig\n);\n\nexport const StaticTimePicker = makePickerWithStateAndWrapper<TimePickerProps>(\n  StaticWrapper,\n  timePickerConfig\n);\n"],"names":["createSvgIcon","React.createElement","React.Fragment","getTextFieldAriaText","value","utils","isValid","date","format","useInterceptProps","ampm","mask","inputFormat","__minTime","minTime","__maxTime","maxTime","openTo","views","other","useUtils","useParsedDate","willUseAmPm","is12HourCycleInCurrentLocale","acceptRegex","getOpenDialogAriaText","openPickerIcon","React","pick12hOr24hFormat","localized","formats","fullTime","fullTime12h","fullTime24h","timePickerConfig","useValidation","makeValidationHook","validateTime","DefaultToolbarComponent","TimePickerToolbar","TimePicker","makePickerWithStateAndWrapper","ResponsiveWrapper","DesktopTimePicker","InlineWrapper","MobileTimePicker","ModalWrapper","StaticTimePicker","StaticWrapper"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;;;AAGA,gBAAeA,aAAa,CAC1BC,cAACC,QAAD,QACED;EAAM,CAAC,EAAC;EADV,EAEEA;EAAM,CAAC,EAAC;EAFV,CAD0B,EAK1B,OAL0B,CAA5B;;;;;ACcO,SAASE,oBAAT,CAA8BC,KAA9B,EAAmDC,KAAnD,EAA6E;SAC3ED,KAAK,IAAIC,KAAK,CAACC,OAAN,CAAcD,KAAK,CAACE,IAAN,CAAWH,KAAX,CAAd,CAAT,2CAC8BC,KAAK,CAACG,MAAN,CAAaH,KAAK,CAACE,IAAN,CAAWH,KAAX,CAAb,EAAgC,UAAhC,CAD9B,IAEH,aAFJ;;;AAKF,SAASK,iBAAT,OAS2C;MARzCC,IAQyC,QARzCA,IAQyC;MAPzCC,IAOyC,QAPzCA,IAOyC;MANzCC,WAMyC,QANzCA,WAMyC;MALhCC,SAKgC,QALzCC,OAKyC;MAJhCC,SAIgC,QAJzCC,OAIyC;yBAHzCC,MAGyC;MAHzCA,MAGyC,4BAHhC,OAGgC;wBAFzCC,KAEyC;MAFzCA,KAEyC,2BAFjC,CAAC,OAAD,EAAU,SAAV,CAEiC;MADtCC,KACsC;;MACnCd,KAAK,GAAGe,QAAQ,EAAtB;MAEMN,OAAO,GAAGO,aAAa,CAACR,SAAD,CAA7B;MACMG,OAAO,GAAGK,aAAa,CAACN,SAAD,CAA7B;MACMO,WAAW,GAAGZ,IAAH,aAAGA,IAAH,cAAGA,IAAH,GAAWL,KAAK,CAACkB,4BAAN,EAA5B;;IAGEL,KAAK,EAALA,KADF;IAEED,MAAM,EAANA,MAFF;IAGEH,OAAO,EAAPA,OAHF;IAIEE,OAAO,EAAPA,OAJF;IAKEN,IAAI,EAAEY,WALR;IAMEE,WAAW,EAAEF,WAAW,GAAG,YAAH,GAAkB,MAN5C;IAOEX,IAAI,EAAEA,IAAI,IAAIW,WAAR,GAAsB,UAAtB,GAAmC,OAP3C;IAQEG,qBAAqB,EAAEtB,oBARzB;IASEuB,cAAc,EAAEC,6BAAC,SAAD,OATlB;IAUEf,WAAW,EAAEgB,kBAAkB,CAAChB,WAAD,EAAcF,IAAd,EAAoB;MACjDmB,SAAS,EAAExB,KAAK,CAACyB,OAAN,CAAcC,QADwB;aAE1C1B,KAAK,CAACyB,OAAN,CAAcE,WAF4B;aAG1C3B,KAAK,CAACyB,OAAN,CAAcG;KAHQ;KAK5Bd,KAfL;;;AAmBF,IAAMe,gBAAgB,GAAG;EACvBzB,iBAAiB,EAAjBA,iBADuB;EAEvB0B,aAAa,EAAEC,kBAAkB,CAC/BC,YAD+B,CAFV;EAKvBC,uBAAuB,EAAEC;CAL3B;AAQA,IAAaC,UAAU,GAAGC,6BAA6B,CACrDC,iBADqD,EAErDR,gBAFqD,CAAhD;AAKP,IAAaS,iBAAiB,GAAGF,6BAA6B,CAC5DG,cAD4D,EAE5DV,gBAF4D,CAAvD;AAKP,IAAaW,gBAAgB,GAAGJ,6BAA6B,CAC3DK,aAD2D,EAE3DZ,gBAF2D,CAAtD;AAKP,IAAaa,gBAAgB,GAAGN,6BAA6B,CAC3DO,aAD2D,EAE3Dd,gBAF2D,CAAtD;;;;"}